<!DOCTYPE html>
<html lang="zh-CN">

<head>
  <meta charset="UTF-8">
  <title>实力管理</title>
  <script>
    const currentUser = <%- JSON.stringify(user || {}) %>; // 在页面顶部定义    
  </script>
  <!-- 引入Tailwind CSS（仅开发环境示例） -->
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <!-- 1. 引入某款艺术字体（示例：Amatic SC） -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Amatic+SC:wght@700&display=swap" />
  <!-- 引入 Font Awesome 图标 -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

  <!-- PDF生成库 -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.23/jspdf.plugin.autotable.min.js"></script>

  <!-- Excel生成库 -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
</head>

<style>
  /* ==================== 全局样式重置和基础配置 ==================== */
  * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
  }
  
  /* 背景图片样式 */
  body {
      background-image: url('/images/background.jpg');
      background-size: cover;
      background-repeat: no-repeat;
      background-position: center;
      background-attachment: fixed;
      margin: 0;
      padding: 0;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Microsoft YaHei", sans-serif;
      color: #2d3748;
      line-height: 1.6;
  }
  
  /* ==================== 艺术字体配置 ==================== */
  .fancy-font {
      font-family: 'Amatic SC', cursive;
  }
  
  /* ==================== 主容器样式 ==================== */
  .container {
      width: 95%;
      max-width: 1800px;
      margin: 20px auto;
      padding: 2rem;
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(20px);
      border-radius: 20px;
      box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
      border: 1px solid rgba(255, 255, 255, 0.3);
      transition: all 0.3s ease;
  }
  
  .container:hover {
      transform: translateY(-3px);
      box-shadow: 0 30px 60px rgba(0, 0, 0, 0.2);
  }
  
  /* ==================== 页面主标题样式 - 超大气势 ==================== */
        /* 页面标题样式 */
        .page-title {
            text-align: center;
            color: white;
            font-size: clamp(1.8rem, 4vw, 3rem);
            font-weight: 700;
            margin-bottom: 2rem;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
            background: rgba(246, 3, 3, 0.6);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

  h1 {
      text-align: center;
      font-size: clamp(4rem, 8vw, 6rem);
      font-weight: 900;
      letter-spacing: 4px;
      margin-bottom: 3rem;
      line-height: 1.1;
      color: transparent;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      text-shadow: 
          0 8px 16px rgba(0, 0, 0, 0.3),
          0 4px 8px rgba(102, 126, 234, 0.4),
          4px 4px 0px rgba(102, 126, 234, 0.6),
          8px 8px 0px rgba(118, 75, 162, 0.4);
      position: relative;
      font-family: 'Microsoft YaHei', 'PingFang SC', 'Hiragino Sans GB', sans-serif;
      animation: titleGlow 3s ease-in-out infinite alternate;
  }

  h11 {
      text-align: center;
      font-weight: 900;
      letter-spacing: 4px;
      margin-bottom: 3rem;
      line-height: 1.1;
      color: #000;
      position: relative;
      font-family: 'Microsoft YaHei', 'PingFang SC', 'Hiragino Sans GB', sans-serif;
  }

  
  @keyframes titleGlow {
      0% {
          filter: drop-shadow(0 0 10px rgba(102, 126, 234, 0.5));
      }
      100% {
          filter: drop-shadow(0 0 20px rgba(118, 75, 162, 0.8));
      }
  }
  
  h1::after {
      content: '';
      position: absolute;
      bottom: -20px;
      left: 50%;
      transform: translateX(-50%);
      width: 300px;
      height: 8px;
      background: linear-gradient(90deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
      border-radius: 4px;
      box-shadow: 0 4px 15px rgba(102, 126, 234, 0.5);
  }
  
  h1::before {
      content: '';
      position: absolute;
      bottom: -35px;
      left: 50%;
      transform: translateX(-50%);
      width: 150px;
      height: 4px;
      background: linear-gradient(90deg, #f093fb 0%, #764ba2 50%, #667eea 100%);
      border-radius: 2px;
      box-shadow: 0 2px 10px rgba(240, 147, 251, 0.4);
  }
  
  /* ==================== 区域标题样式 ==================== */
  h2 {
      color: #2d3748;
      font-size: 1.8rem;
      font-weight: 700;
      margin-bottom: 1.5rem;
      padding: 1rem 1.5rem;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border-radius: 15px;
      display: flex;
      align-items: center;
      gap: 0.75rem;
      position: relative;
      box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  }
  
  h2::before {
      content: '📊';
      font-size: 1.5rem;
      margin-right: 0.5rem;
  }
  
  /* 不同区域的图标 */
  section:first-of-type h2::before {
      content: '👥'; /* 实力信息列表 */
  }
  
  section:nth-of-type(2) h2::before {
      content: '📤'; /* 模版上传 */
  }
  
  /* ==================== 卡片容器基础样式 ==================== */
  section {
      background: rgba(255, 255, 255, 0.98);
      backdrop-filter: blur(15px);
      padding: 0.1rem;
      margin-top: 0.5rem; 
      margin-bottom: 0.5rem;
      border-radius: 20px;
      box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
      border: 1px solid rgba(102, 126, 234, 0.15);
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
  }
  
  section::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 4px;
      background: linear-gradient(90deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
  }
  
  section:hover {
      transform: translateY(-3px);
      box-shadow: 0 20px 45px rgba(0, 0, 0, 0.15);
  }
  
  /* ==================== 搜索表单样式 ==================== */
  .search-form, #searchForm {
      background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
      padding: 2rem;
      border-radius: 20px;
      margin-bottom: 0.1rem;
      border: 2px solid rgba(102, 126, 234, 0.2);
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
      align-items: end;
      position: relative;
  }
  
  .search-form::before, #searchForm::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 3px;
      background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
      border-radius: 20px 20px 0 0;
  }
  
  .search-form input,
  .search-form select,
  #searchForm input,
  #searchForm select {
      flex: 1;
      min-width: 150px;
      height: 3rem;
      padding: 0.75rem 1rem;
      border: 2px solid #e2e8f0;
      border-radius: 12px;
      font-size: 14px;
      background: #fff;
      transition: all 0.3s ease;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
      font-family: inherit;
  }
  
  .search-form input:focus,
  .search-form select:focus,
  #searchForm input:focus,
  #searchForm select:focus {
      outline: none;
      border-color: #667eea;
      box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.15);
      transform: translateY(-2px);
  }
  
  .search-form input::placeholder {
      color: #a0aec0;
      font-style:normal;
  }
  
  /* ==================== 按钮系统样式 ==================== */
  .button, .btn-change, .btn-delete, .btn-button {
      padding: 0.875rem 1.75rem;
      border: none;
      border-radius: 12px;
      font-size: 14px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      position: relative;
      overflow: hidden;
      white-space: nowrap;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
      min-width: 130px;
      text-transform: uppercase;
      letter-spacing: 0.5px;
  }

  .btn-change1, .btn-delete1 {
      padding: 0.2rem 0.2rem;
      border: none;
      border-radius: 12px;
      font-size: 14px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.2rem;
      position: relative;
      overflow: hidden;
      white-space: nowrap;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
      min-width: 50px;
      text-transform: uppercase;
      letter-spacing: 0.5px;
  }

  
  /* 按钮光泽效果 */
  .button::before,
  .btn-change::before,
  .btn-delete::before,
  .btn-button::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
      transition: left 0.6s;
  }
  
  .button:hover::before,
  .btn-change:hover::before,
  .btn-delete:hover::before,
  .btn-button:hover::before {
      left: 100%;
  }
  
  /* 主要按钮 - 蓝紫渐变 */
  .button, .btn-button {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
  }
  
  .button:hover, .btn-button:hover {
      transform: translateY(-3px) scale(1.02);
      box-shadow: 0 10px 30px rgba(102, 126, 234, 0.5);
      background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%);
  }
  
  .button:active, .btn-button:active {
      transform: translateY(-1px) scale(0.98);
  }
  
  /* 搜索按钮 - 青色渐变 */
  .btn-change {
      background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
      color: white;
      box-shadow: 0 6px 20px rgba(79, 172, 254, 0.4);
  }
  
  .btn-change:hover {
      transform: translateY(-3px) scale(1.02);
      box-shadow: 0 10px 30px rgba(79, 172, 254, 0.5);
      background: linear-gradient(135deg, #3d8bfe 0%, #00d4fe 100%);
  }


  /* 搜索按钮 - 青色渐变 */
  .btn-change1 {
      background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
      color: white;
      box-shadow: 0 6px 20px rgba(79, 172, 254, 0.4);
  }
  
  .btn-change1:hover {
      transform: translateY(-3px) scale(1.02);
      box-shadow: 0 10px 30px rgba(79, 172, 254, 0.5);
      background: linear-gradient(135deg, #3d8bfe 0%, #00d4fe 100%);
  }  
  
  /* 删除/重置按钮 - 红色渐变 */
  .btn-delete {
      background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%);
      color: white;
      box-shadow: 0 6px 20px rgba(255, 107, 107, 0.4);
  }
  
  .btn-delete:hover {
      transform: translateY(-3px) scale(1.02);
      box-shadow: 0 10px 30px rgba(255, 107, 107, 0.5);
      background: linear-gradient(135deg, #ff5252 0%, #e53e3e 100%);
  }


  /* 删除/重置按钮 - 红色渐变 */
  .btn-delete1 {
      background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%);
      color: white;
      box-shadow: 0 6px 20px rgba(255, 107, 107, 0.4);
  }
  
  .btn-delete1:hover {
      transform: translateY(-3px) scale(1.02);
      box-shadow: 0 10px 30px rgba(255, 107, 107, 0.5);
      background: linear-gradient(135deg, #ff5252 0%, #e53e3e 100%);
  }  
  
  /* ==================== 分页按钮样式 ==================== */
  #firstPage, #prevPage, #nextPage, #lastPage {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border: none;
      padding: 0.875rem 1.5rem;
      margin: 0 0.5rem;
      border-radius: 25px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 6px 20px rgba(102, 126, 234, 0.3);
      font-size: 14px;
      min-width: 100px;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      text-transform: uppercase;
      letter-spacing: 0.5px;
  }
  
  #firstPage:hover, #prevPage:hover, #nextPage:hover, #lastPage:hover {
      transform: translateY(-3px) scale(1.05);
      box-shadow: 0 10px 30px rgba(102, 126, 234, 0.5);
      background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%);
  }
  
  #firstPage:disabled, #prevPage:disabled, #nextPage:disabled, #lastPage:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      transform: none !important;
      background: #94a3b8;
  }
  
  /* ==================== 页码信息样式 ==================== */
  #pageInfo {
      padding: 0.875rem 2rem;
      background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
      border-radius: 25px;
      font-weight: 700;
      color: #667eea;
      border: 2px solid rgba(102, 126, 234, 0.3);
      margin: 0 1rem;
      font-size: 16px;
      box-shadow: 0 4px 15px rgba(102, 126, 234, 0.2);
      text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }
  
/* ==================== 单选框组样式 ==================== */  
.radio-group {  
    display: flex;  
    gap: 1.5rem;  
    align-items: center;
    justify-content: center;
    margin-top: 0.1rem; 
    margin-bottom: 0.1rem; 
    padding: 0.1rem;  
    background: rgba(102, 126, 234, 0.08);  
    border-radius: 15px;  
    border: 2px solid rgba(102, 126, 234, 0.2);  
}  

.radio-group label {  
    display: flex;  
    align-items: center;  
    gap: 0.1rem;  
    cursor: pointer;  
    font-weight: 600;  
    color: #4a5568;  
    padding: 0.75rem 1.25rem;  
    border-radius: 10px;  
    transition: all 0.3s ease;  
    background: rgba(255, 255, 255, 0.7);  
    border: 1px solid rgba(102, 126, 234, 0.2);  
}  

.radio-group label:hover {  
    background: rgba(102, 126, 234, 0.15);  
    transform: translateY(-2px);  
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.2);  
}  

input[type="radio"], input[type="checkbox"] {  
    width: 20px;  
    height: 20px;  
    accent-color: #667eea;  
    cursor: pointer;  
}  
  
  /* ==================== 表格容器和样式 ==================== */
  .table-container {
      background: #fff;
      border-radius: 20px;
      overflow: hidden;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.12);
      border: 2px solid rgba(102, 126, 234, 0.2);
      margin: 0rem 0;
      max-height: 1200px;
      overflow-y: auto;
      position: relative;
      padding: 0 0;
  }
  
  .table-container::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 4px;
      background: linear-gradient(90deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
      z-index: 10;
  }
  
  .users-table {
      width: 100%;
      border-collapse: collapse;
      margin: 0;
      background: #fff;
      font-size: 13px;
      table-layout: fixed;
  }
  
  /* ==================== 表头样式 - 支持自动换行 ==================== */
  .users-table thead {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      position: sticky;
      top: 0;
      z-index: 10;
  }
  
.users-table th {  
  padding: 0.3rem 0.1rem; /* 稍微增加上下padding */  
  text-align: center;  
  font-weight: 700;  
  color: white;  
  border: none;  
  font-size: 14px;  
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);  
  white-space: normal !important;  
  word-break: break-all !important;  
  line-height: 1.1; /* 从0.5改为1.1 */  
  min-height: 20px; /* 从30px减小到20px */  
  height: 25px; /* 固定高度 */  
  vertical-align: middle;  
  position: relative;  
  text-transform: uppercase;  
  letter-spacing: 0.5px;  
} 
  
  .users-table th::after {
      content: '';
      position: absolute;
      right: 0;
      top: 10%;
      height: 80%;
      width: 1px;
      background: rgba(255, 255, 255, 0.3);
  }
  
  .users-table th:last-child::after {
      display: none;
  }
  
  
  /* ==================== 表格数据行样式 ==================== */
  .users-table td {  
    padding: 0.1rem; /* 减小padding */  
    text-align: center;  
    border-bottom: 1px solid #e2e8f0;  
    background: #fff;  
    transition: all 0.3s ease;  
    vertical-align: middle;  
    font-size: 13px;  
    word-break: break-word;  
    hyphens: auto;  
    white-space: normal;  
    color: #4a5568;  
    font-weight: 500;  
    line-height: 1.1;  
    height: 30px; /* 从15px改为30px，给按钮足够空间 */  
} 
  
  .users-table tr:nth-child(even) td {
      background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
  }
  
  .users-table tbody tr:hover td {
      background: linear-gradient(135deg, #e8f2ff 0%, #dbeafe 100%);
      transform: scale(1.001);
      box-shadow: 0 4px 15px rgba(102, 126, 234, 0.15);
      color: #2d3748;
      font-weight: 600;
  }
  
  .users-table tbody tr {
      transition: all 0.3s ease;
      cursor: pointer;
  }
  
  /* 操作按钮在表格中的样式 */
  .users-table td .btn-change1,  
.users-table td .btn-delete1 {  
    padding: 2px 6px; /* 很小的内边距 */  
    font-size: 10px;  
    margin: 0 0px; /* 只有左右间距 */  
    min-width: 30px; /* 减小最小宽度 */  
    height: 20px; /* 固定按钮高度 */  
    line-height: 16px; /* 按钮内文字行高 */  
    border-radius: 4px;  
    border: none;  
    display: inline-block;  
    vertical-align: middle;  
}
  
/* 包含按钮的单元格 - 关键设置 */  
/* 操作列单独设置 */  
.users-table td:last-child {  
    padding: 2px; /* 操作列更小的内边距 */  
    height: 30px;  
    white-space: nowrap;  
}


  /* ==================== 模态窗口样式 ==================== */
  .modal-backdrop {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.7);
      backdrop-filter: blur(15px);
      z-index: 999;
      animation: fadeIn 0.3s ease-out;
  }
  
  .modal-backdrop.active {
      display: block;
  }
  
  .modal {
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      z-index: 1000;
      width: 90%;
      max-width: 1200px;
      max-height: 90vh;
      overflow-y: auto;
      animation: modalShow 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
  }
  
  @keyframes modalShow {
      from {
          opacity: 0;
          transform: translate(-50%, -60%) scale(0.9);
      }
      to {
          opacity: 1;
          transform: translate(-50%, -50%) scale(1);
      }
  }
  
  .modal-content {
      background: #fff;
      border-radius: 20px;
      box-shadow: 0 30px 60px rgba(0, 0, 0, 0.3);
      overflow: hidden;
      border: 2px solid rgba(102, 126, 234, 0.2);
      position: relative;
  }
  
  .modal-content::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 4px;
      background: linear-gradient(90deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
  }
  
  .modal-header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      padding: 2rem;
      color: white;
      position: relative;
  }
  
  .modal-header h2 {
      color: white;
      margin: 0;
      font-size: 1.8rem;
      font-weight: 700;
      border: none;
      text-align: center;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 1rem;
      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  }
  
  .modal-header h2::after,
  .modal-header h2::before {
      display: none;
  }
  
  .modal-header span {
      position: absolute;
      right: 2rem;
      top: 50%;
      transform: translateY(-50%);
      font-size: 28px;
      cursor: pointer;
      color: white;
      opacity: 0.8;
      transition: all 0.3s;
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.1);
  }
  
  .modal-header span:hover {
      opacity: 1;
      background: rgba(255, 255, 255, 0.2);
      transform: translateY(-50%) scale(1.1);
  }
  
  .modal-body {
      padding: 2.5rem;
      max-height: 60vh;
      overflow-y: auto;
      background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
  }
  
  .modal-footer {
      padding: 2rem;
      background: #fff;
      border-top: 2px solid #e2e8f0;
      display: flex;
      justify-content: flex-end;
      gap: 1rem;
  }
  
  /* ==================== 表单样式 ==================== */
  .form-group {
      margin-bottom: 1.5rem;
  }
  
  .form-label {
      display: block;
      margin-bottom: 0.75rem;
      font-weight: 600;
      color: #374151;
      font-size: 14px;
  }
  
  .form-control, .form-select {
      width: 100%;
      padding: 0.875rem 1rem;
      border: 2px solid #e2e8f0;
      border-radius: 12px;
      font-size: 14px;
      background: #fff;
      transition: all 0.3s ease;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
      font-family: inherit;
      min-height: 45px;
  }
  
  .form-control:focus, .form-select:focus {
      outline: none;
      border-color: #667eea;
      box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.15);
      transform: translateY(-2px);
  }
  
  /* Bootstrap网格系统保持 */
  .row {
      display: flex;
      flex-wrap: wrap;
      margin: 0 -0.75rem;
      width: 100%;
  }
  
  .col-md-3, .col-md-4, .col-md-6, .col-md-12 {
      padding: 0 0.75rem;
      flex-grow: 1;
      transition: all 0.3s ease;
  }
  
  .col-md-3 { flex: 0 0 25%; max-width: 25%; }
  .col-md-4 { flex: 0 0 33.333333%; max-width: 33.333333%; }
  .col-md-6 { flex: 0 0 50%; max-width: 50%; }
  .col-md-12 { flex: 0 0 100%; max-width: 100%; }
  
  .mb-3 {
      margin-bottom: 1.5rem !important;
  }
  
  /* ==================== 按钮组布局 ==================== */
  div[style*="display: flex"][style*="justify-content: center"] {
      display: flex !important;
      justify-content: center !important;
      align-items: center !important;
      gap: 1.5rem !important;
      margin: 2rem 0 !important;
      flex-wrap: wrap !important;
  }
  
  .action-buttons {
      display: flex;
      gap: 1.5rem;
      justify-content: center;
      margin-top: 2rem;
      flex-wrap: wrap;
      align-items: center;
  }
  
  .button-container {
      display: flex;
      justify-content: flex-end;
      gap: 1rem;
  }
  
  /* ==================== 分割线美化 ==================== */
  hr {
      border: none;
      height: 2px;
      background: linear-gradient(90deg, transparent, #667eea, transparent);
      margin: 3rem 0;
      border-radius: 1px;
  }
  
  /* ==================== 错误和成功状态 ==================== */
  .error {
      border-color: #f56565 !important;
      box-shadow: 0 0 0 4px rgba(245, 101, 101, 0.15) !important;
  }
  
  .error-message {
      color: #e53e3e;
      font-size: 12px;
      margin-top: 0.5rem;
      font-weight: 500;
  }
  
  .success-message {
      color: #38a169;
      font-size: 12px;
      margin-top: 0.5rem;
      font-weight: 500;
  }
  
  /* ==================== 动画效果 ==================== */
  @keyframes fadeInUp {
      from { 
          opacity: 0; 
          transform: translateY(30px); 
      }
      to { 
          opacity: 1; 
          transform: translateY(0); 
      }
  }
  
  @keyframes pulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.05); }
      100% { transform: scale(1); }
  }
  
  /* 页面加载动画 */
  section {
      animation: fadeInUp 0.6s ease-out;
  }
  
  section:nth-child(2) {
      animation-delay: 0.2s;
  }
  
  /* ==================== 响应式设计 ==================== */
  @media screen and (max-width: 1400px) {
      h1 {
          font-size: clamp(3rem, 6vw, 4rem);
          letter-spacing: 3px;
      }
      
      .container {
          width: 98%;
          padding: 1.5rem;
      }
      
      .users-table {
          font-size: 12px;
      }
      
      .users-table th,
      .users-table td {
          padding: 0.8rem 0.4rem;
      }
  }
  
  @media screen and (max-width: 1024px) {
      h1 {
          font-size: clamp(2.5rem, 5vw, 3.5rem);
          letter-spacing: 2px;
      }
      
      .search-form, #searchForm {
          flex-direction: column;
          align-items: stretch;
      }
      
      .search-form input,
      .search-form select,
      #searchForm input,
      #searchForm select {
          min-width: auto;
          width: 100%;
      }
      
      .users-table {
          font-size: 11px;
      }
      
      .users-table th,
      .users-table td {
          padding: 0.6rem 0.3rem;
      }
      
      .radio-group {
          flex-direction: column;
          align-items: stretch;
          gap: 1rem;
      }
  }
  
  @media screen and (max-width: 768px) {
      .container {
          margin: 10px;
          padding: 1rem;
          border-radius: 15px;
      }
      
      h1 {
          font-size: 2.5rem;
          margin-bottom: 2rem;
          letter-spacing: 1px;
      }
      
      h2 {
          font-size: 1.4rem;
          padding: 0.8rem 1rem;
      }
      
      section {
          padding: 1.5rem;
          margin-bottom: 1.5rem;
      }
      
      .modal {
          width: 95%;
          max-height: 90vh;
      }
      
      .modal-body {
          padding: 1.5rem;
      }
      
      .modal-footer {
          padding: 1rem 1.5rem;
          flex-direction: column;
      }
      
      .col-md-3, .col-md-4, .col-md-6 {
          flex: 0 0 100%;
          max-width: 100%;
          margin-bottom: 1rem;
      }
      
      .users-table {
          font-size: 10px;
      }
      
      .users-table th,
      .users-table td {
          padding: 0.4rem 0.2rem;
      }
      
      /* 表格横向滚动 */
      .table-container {
          overflow-x: auto;
      }
      
      .users-table {
          min-width: 1400px;
      }
      
      div[style*="display: flex"][style*="justify-content: center"] {
          flex-direction: column;
          align-items: center;
      }
      
      .button, .btn-change, .btn-delete, .btn-button {
          min-width: 200px;
          margin-bottom: 0.5rem;
      }
  }
  
  @media screen and (max-width: 480px) {
      h1 {
          font-size: 2rem;
          letter-spacing: 1px;
      }
      
      .users-table th,
      .users-table td {
          padding: 0.3rem 0.15rem;
          font-size: 9px;
      }
      
      .button, .btn-change, .btn-delete, .btn-button {
          padding: 0.75rem 1rem;
          font-size: 12px;
          min-width: 150px;
      }

      .btn-change1, .btn-delete1 {
          padding: 0.1rem 0.1rem;
          font-size: 12px;
          min-width: 50px;
      }

      
      #firstPage, #prevPage, #nextPage, #lastPage {
          padding: 0.75rem 1rem;
          font-size: 12px;
          min-width: 80px;
      }
  }
  
  /* ==================== 滚动条美化 ==================== */
  ::-webkit-scrollbar {
      width: 10px;
      height: 10px;
  }
  
  ::-webkit-scrollbar-track {
      background: linear-gradient(135deg, #f1f5f9, #e2e8f0);
      border-radius: 5px;
  }
  
  ::-webkit-scrollbar-thumb {
      background: linear-gradient(135deg, #667eea, #764ba2);
      border-radius: 5px;
      border: 1px solid rgba(255, 255, 255, 0.2);
  }
  
  ::-webkit-scrollbar-thumb:hover {
      background: linear-gradient(135deg, #5a6fd8, #6a4190);
  }
  
  ::-webkit-scrollbar-corner {
      background: #f1f5f9;
  }
  
  /* ==================== 特殊功能样式 ==================== */
  .badge {
      display: inline-block;
      padding: 0.4rem 0.8rem;
      font-size: 0.75rem;
      font-weight: 600;
      border-radius: 20px;
      text-align: center;
      white-space: nowrap;
      text-transform: uppercase;
      letter-spacing: 0.5px;
  }
  
  .badge-primary {
      background: linear-gradient(135deg, #667eea, #764ba2);
      color: white;
      box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
  }
  
  .badge-success {
      background: linear-gradient(135deg, #48bb78, #38a169);
      color: white;
      box-shadow: 0 2px 8px rgba(72, 187, 120, 0.3);
  }
  
  .badge-warning {
      background: linear-gradient(135deg, #ed8936, #dd6b20);
      color: white;
      box-shadow: 0 2px 8px rgba(237, 137, 54, 0.3);
  }
  
  .badge-danger {
      background: linear-gradient(135deg, #f56565, #e53e3e);
      color: white;
      box-shadow: 0 2px 8px rgba(245, 101, 101, 0.3);
  }
  
  /* ==================== 状态指示器 ==================== */
  .status-indicator {
      width: 10px;
      height: 10px;
      border-radius: 50%;
      display: inline-block;
      margin-right: 0.5rem;
      animation: pulse 2s infinite;
  }
  
  .status-active {
      background: linear-gradient(135deg, #48bb78, #38a169);
      box-shadow: 0 0 0 3px rgba(72, 187, 120, 0.3);
  }
  
  .status-inactive {
      background: #a0aec0;
      box-shadow: 0 0 0 3px rgba(160, 174, 192, 0.2);
      animation: none;
  }
  
  /* ==================== 工具提示 ==================== */
  .tooltip {
      position: relative;
      cursor: help;
  }
  
  .tooltip:hover::after {
      content: attr(data-tooltip);
      position: absolute;
      bottom: 120%;
      left: 50%;
      transform: translateX(-50%);
      background: rgba(0, 0, 0, 0.9);
      color: white;
      padding: 0.75rem 1rem;
      border-radius: 8px;
      font-size: 12px;
      white-space: nowrap;
      z-index: 1000;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }
  
  .tooltip:hover::before {
      content: '';
      position: absolute;
      bottom: 110%;
      left: 50%;
      transform: translateX(-50%);
      border: 6px solid transparent;
      border-top-color: rgba(0, 0, 0, 0.9);
      z-index: 1000;
  }
  
  /* ==================== 高级样式增强 ==================== */
  .glass-morphism {
      background: rgba(255, 255, 255, 0.15);
      backdrop-filter: blur(20px);
      border: 1px solid rgba(255, 255, 255, 0.3);
  }
  
  .gradient-text {
      background: linear-gradient(135deg, #667eea, #764ba2);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
  }
  
  /* ==================== 加载状态 ==================== */
  .loading {
      position: relative;
      pointer-events: none;
      opacity: 0.7;
  }
  
  .loading::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 24px;
      height: 24px;
      margin: -12px 0 0 -12px;
      border: 3px solid #667eea;
      border-radius: 50%;
      border-top-color: transparent;
      animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
      to { transform: rotate(360deg); }
  }
  
  /* ==================== 特殊输入控件样式 ==================== */
  input[type="file"] {
      padding: 0.75rem;
      border: 2px dashed #667eea;
      border-radius: 12px;
      background: rgba(102, 126, 234, 0.05);
      transition: all 0.3s ease;
      cursor: pointer;
  }
  
  input[type="file"]:hover {
      border-color: #764ba2;
      background: rgba(118, 75, 162, 0.1);
      transform: translateY(-2px);
  }
  
  /* ==================== 日期范围选择器 ==================== */
  .date-range {
      display: flex;
      align-items: center;
      gap: 1rem;
      padding: 1rem;
      background: rgba(102, 126, 234, 0.05);
      border-radius: 12px;
      border: 1px solid rgba(102, 126, 234, 0.2);
  }
  
  .date-range input[type="date"] {
      border: 2px solid #e2e8f0;
      border-radius: 8px;
      padding: 0.5rem;
      background: white;
      transition: all 0.3s ease;
  }
  
  .date-range input[type="date"]:focus {
      border-color: #667eea;
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
  }
  
  /* ==================== 超大屏幕优化 ==================== */
  @media (min-width: 1600px) {
      .container {
          max-width: 1600px;
      }
      
      h1 {
          font-size: 6rem;
          letter-spacing: 6px;
      }
      
      h2 {
          font-size: 2.2rem;
      }
      
      .form-label {
          font-size: 1.2rem;
          margin-bottom: 10px;
      }
      
      .form-control,
      .form-select {
          font-size: 1.1rem;
          padding: 1rem 1.25rem;
          min-height: 50px;
      }
      
      .modal-header h2 {
          font-size: 2.2rem;
      }
      
      .modal {
          max-width: 1400px;
      }
  }
  
  @media (min-width: 2000px) {
      .modal {
          max-width: 1800px;
      }
      
      .row {
          gap: 20px;
      }
      
      h1 {
          font-size: 7rem;
          letter-spacing: 8px;
      }
  }

  .print-container {
    width: 100%;
    max-width: 1500px;
    margin: 0 auto;
    padding: 20px;
    background: #fff;
  }

  .print-header {
    text-align: center;
    margin-bottom: 20px;
  }

  .print-header h1 {
    margin-bottom: 10px;
  }  
  
  .print-header h11 {
    margin-bottom: 10px;
  }



  .print-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
  }

  .print-table th,
  .print-table td {
    border: 1px solid #000;
    padding: 8px;
    text-align: center;
  }

  .print-table th {
    background-color: #f0f0f0;
  }

  .print-footer {
    display: flex;
    justify-content: space-between;
    margin-top: 20px;
  }

  @media print {
    body * {
      visibility: hidden;
    }

    .print-container,
    .print-container * {
      visibility: visible;
    }

    .print-container {
      position: absolute;
      left: 0;
      top: 0;
      width: 100%;
      padding: 0;
    }

    .no-print {
      display: none !important;
    }
  }

  /* 打印专用样式 */
  @media print {

    /* 基本打印设置 */
    @page {
      size: auto;
      margin: 10mm 10mm 10mm 10mm;
      /* 减小页面边距 */
    }

    body {
      margin: 0;
      padding: 0;
      background: white;
    }

    /* 隐藏非打印元素 */
    .no-print {
      display: none !important;
    }

    /* 控制打印容器 */
    .print-container {
      width: 100%;
      margin: 0;
      padding: 0;
      page-break-after: avoid;
      /* 防止容器后自动分页 */
    }

    /* 控制表格打印 */
    table {
      width: 100% !important;
      page-break-inside: auto;
      border-collapse: collapse;
    }

    tr,
    td,
    th {
      page-break-inside: avoid;
      /* 尽量避免行内分页 */
    }

    /* 如果按钮在容器中，可以为容器添加样式 */
    .print-footer .no-print {
      display: flex;
      justify-content: flex-end;
      gap: 10px;
      /* 按钮之间的间距 */
      margin-bottom: 10px;
      /* 底部留一些空间 */
    }

    .button-container {
      display: flex;
      justify-content: flex-end;
      gap: 10px;
    }

    .action-buttons {
      display: flex !important;
      justify-content: flex-end !important;
      gap: 10px;
      width: 100%;
    }

    /* 重置可能影响对齐的样式 */
    .print-footer {
      width: 100%;
      box-sizing: border-box;
    }

    .no-print {
      width: 100%;
    }


    /* 避免元素产生无意义的分页 */
    * {
      overflow: visible !important;
    }

  /* 确保filter-group不会影响栅格布局 */  
  .filter-group {  
    width: 100%;  
    padding: 0;  
    margin: 0;  
  }  
  
  /* 确保每个row是flex布局并且填充整个宽度 */  
  .filter-group .row {  
    display: flex;  
    width: 100%;  
    margin-left: 0;  
    margin-right: 0;  
  }  
  
  /* 关键修复：确保col-md-4实际占用33.33%的宽度 */  
  .filter-group .col-md-4 {  
    width: 33.33%;  
    flex: 0 0 33.33%;  
    max-width: 33.33%;  
    box-sizing: border-box;  
  }  
  
  /* 确保表单元素填充整个列宽 */  
  .filter-group .form-control {  
    width: 100%;  
    box-sizing: border-box;  
  }  
  
  /* 确保标签不会影响布局 */  
  .filter-group label {  
    display: block;  
    width: 100%;  
    box-sizing: border-box;  
  }  
  
  /* 如果需要，可以添加媒体查询以确保在小屏幕上正确显示 */  
  @media (max-width: 768px) {  
    .filter-group .col-md-4 {  
      width: 100%;  
      flex: 0 0 100%;  
      max-width: 100%;  
    }  
  }  

  }

  
    /* ========== 新增：为表格外层加一个固定高度+滚动条容器 ========== */  
    .table-container {  
      max-height: 1200px; /* 根据实际需求调整表格容器的最大高度*/  
      overflow-y: auto;  /* 当内容超过最大高度时出现垂直滚动条*/  
      border: 1px solid #ccc;  
      margin: 16px 0;  
    }  
    /* 搜索区域 */  
    .search-container {  
      margin-bottom: 12px;  
    }  
    .search-container input {  
      width: 200px;  
      padding: 6px;  
    }  
    .search-container button {  
      padding: 6px 12px;  
      margin-left: 8px;  
      cursor: pointer;  
    }  

  </style>

<body>

  <script src="https://unpkg.com/xlsx-js-style@1.2.0/dist/xlsx.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.15/jspdf.plugin.autotable.min.js"></script>


  <div class="container">
    <h1 class="page-title">
      <i class="fas fa-users-cog"></i>
      实力管理
  </h1>
    <!-- 消防员信息表格展示 -->
    <section>
      <h2>实力信息列表</h2>

      <form id="searchForm" class="search-form">
        <div class="row">
        <input type="text" id="searchNumber" placeholder="编号">
        <input type="text" id="searchName" placeholder="姓名">
        <select class="form-select" id="searchGender" placeholder="请选择性别">
          <option value="">请选择性别</option>
          <option value="男">男</option>
          <option value="女">女</option>
        </select>
        <input type="number" id="searchAgeMin" placeholder="年龄最小值">
        <input type="number" id="searchAgeMax" placeholder="年龄最大值">
        </div>
        <div class="row">
        <select class="form-select" id="searchPosition" placeholder="请选择职务">
          <option value="">请选择职务</option>
          <option value="专职消防员">专职消防员</option>
          <option value="消防文员">消防文员</option>
          <option value="其它">其它</option>
        </select>
        <select class="form-select" id="searchTeam" placeholder="请选择单位">
          <option value="">请选择单位</option>
          <option value="防火战线">防火战线</option>  
          <option value="灭火战线">灭火战线</option>  
          <option value="政治部战线">政治部战线</option>  
          <option value="后勤战线">后勤战线</option>  
          <option value="指挥中心和勤务站">指挥中心和勤务站</option>  
          <option value="战勤保障大队">战勤保障大队</option>  
          <option value="白塔区消防救援大队">白塔区消防救援大队</option>  
          <option value="铁西路消防救援站">铁西路消防救援站</option>  
          <option value="文圣区消防救援大队">文圣区消防救援大队</option>  
          <option value="安康路消防救援站">安康路消防救援站</option>  
          <option value="文昌街消防救援站">文昌街消防救援站</option>  
          <option value="太子河区消防救援大队">太子河区消防救援大队</option>  
          <option value="蔡四路特勤站">蔡四路特勤站</option>  
          <option value="辽阳县消防救援大队">辽阳县消防救援大队</option>  
          <option value="下达河消防救援站">下达河消防救援站</option>  
          <option value="刘二堡消防救援站">刘二堡消防救援站</option>  
          <option value="黄泥洼消防救援站">黄泥洼消防救援站</option>  
          <option value="灯塔市消防救援大队">灯塔市消防救援大队</option>  
          <option value="佟二堡消防救援站">佟二堡消防救援站</option>  
          <option value="铧子消防救援站">铧子消防救援站</option>  
          <option value="宏伟区消防救援大队">宏伟区消防救援大队</option>  
          <option value="万和一路消防救援站">万和一路消防救援站</option>  
          <option value="弓长岭区消防救援大队">弓长岭区消防救援大队</option>  
          <option value="汤泉谷消防救援站">汤泉谷消防救援站</option>  
          <option value="其它">其它</option>
        </select>
        <select class="form-select" id="searchYear" placeholder="请选择工作年限">
          <option value="">请选择工作年限</option>
          <option value="1年">1年</option>
          <option value="2年">2年</option>
          <option value="3年">3年</option>
          <option value="4年">4年</option>
          <option value="5年">5年</option>
          <option value="6年">6年</option>
          <option value="7年">7年</option>
          <option value="8年">8年</option>
          <option value="9年">9年</option>
          <option value="10年含以上">10年含以上</option>
          <option value="其它">其它</option>
        </select>
        </div>
        <!-- 可以继续添加搜索条件 -->
      </form>
      <div class="row">
        <div class="col-md-12 mb-3"  style="display: flex; justify-content: center; gap: 5px; margin-top: 5px; margin-bottom: 5px;">
        <button type="button" onclick="searchFirefighters()" class="btn-change">搜索</button>
        <button type="button" onclick="resetSearch()" class="btn-delete">重置</button>
        <button type="button" onclick="showAddFirefighterModal()" class="btn-button">添加实力</button>
        <button type="button" onclick="printnow()" class="btn-button">打印搜索实力</button> 
        <button type="button" onclick="printall()" class="btn-button">打印所有实力</button>
      </div>
      </div>

      <div class="radio-group">
              <label style="font-style: solid; font-size: 20px;">打印格式：</label>
              <label>
                <input type="radio" name="printoutputFormat" value="print" checked> 打印
              </label>
              <label>
                <input type="radio" name="printoutputFormat" value="pdf"> PDF
              </label>
              <label>
                <input type="radio" name="printoutputFormat" value="excel"> Excel
              </label>
          </div>
    </section>     

      <section>
      <div class="table-container">
      <table id="firefightersTable" class="users-table" style="width: 100%; table-layout: fixed; border-collapse: collapse; justify-content: center;">
        <thead>
          <tr>
            <th style="width: 2%;"><input type="checkbox" id="selectAll" title="全选/取消全选"></th>
            <th style="width: 10%;">编号</th>
            <th style="width: 5%;">姓名</th>
            <th style="width: 4%;">性别</th>
            <th style="width: 6%;">出生年月</th>
            <th style="width: 4%;">年龄</th>
            <th style="width: 6%;">职务</th>
            <th style="width: 5%;">单位</th>
            <th style="width: 6%;">工作年限</th>
            <th style="width: 5%;">帽类号</th>
            <th style="width: 5%;">服装号</th>
            <th style="width: 5%;">鞋类号</th>
            <th style="width: 3%;">身高</th>
            <th style="width: 3%;">胸围</th>
            <th style="width: 3%;">腰围</th>
            <th style="width: 3%;">头围</th>
            <th style="width: 4%;">可用余额</th>
            <th style="width: 4%;">经费来源</th>
            <th style="width: 4%;">备注</th>
            <th style="width: 4%;">操作</th>
          </tr>
        </thead>
        <tbody>
          <!-- 数据将通过AJAX动态加载 -->
        </tbody>
      </table>
    </div>

    <div style="display: flex; justify-content: center; gap: 15px; margin-top: 10px; margin-bottom: 5px;">
      <button id="firstPage" class="bg-green-500 text-white px-2 py-1 rounded" onclick="changePage1()">首页</button>         
      <button id="prevPage" class="bg-green-500 text-white px-2 py-1 rounded" onclick="changePage(-1)">前一页</button>  
      <div id="pageInfo" class="text-center text-lg font-bold text-gray-700"></div>  
      <button id="nextPage" class="bg-green-500 text-white px-2 py-1 rounded" onclick="changePage(1)">后一页</button>
      <button id="lastPage" class="bg-green-500 text-white px-2 py-1 rounded" onclick="changePageN()">尾页</button>   
  </div>      
  <!-- 在搜索表单下方，按钮区域添加批量删除按钮 -->
  <div style="display: flex; justify-content: center; gap: 15px; margin-top: 10px; margin-bottom: 5px;">
    <button onclick="showChangeTeamModal()" class="button">实力单位变更</button>
    <button class="button" id="batchUpdateFundsBtn">批量修改经费</button>  
    <button id="batchDeleteBtn" class="button">批量删除</button>
    <button onclick="showReportModal()" class="button">打印报表</button>
  </div>        
    </section>

    <!-- Excel模板下载 + 导入 -->
    <section>
      <h2>模版上传实力信息</h2>
      <form id="importForm"
        style="display: flex; justify-content: center; align-items: center; flex-wrap: wrap; gap: 15px; margin-top: 10px; margin-bottom: 10px;">
        <a href="/firefighters/template/firefighters_template.xlsx" class="button"
          style="white-space: nowrap;">下载Excel模板</a>
        <label for="excelFile" style="margin: 0 5px; white-space: nowrap;">上传Excel文件：</label>
        <input type="file" id="excelFile" name="excelFile" accept=".xlsx" required style="margin: 0 5px;">
        <button type="submit" class="button" style="white-space: nowrap;">导入</button>
      </form>
    </section>
    
  </div>


  <!-- 模态窗口（用于添加和修改消防员信息） -->
  <!-- 背景遮罩 -->
  <div class="modal-backdrop" id="modalBackdrop"></div>
  <!-- 模态窗口（用于添加和修改消防员信息） -->
  <div id="firefighterModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2 id="modalTitle" class="text-5xl text-center">添加实力</h2>
        <span id="closeModal" style="cursor:pointer;">&times;</span>
      </div>
      
      <div class="modal-body">
        <form id="firefighterForm">
          <input type="hidden" id="firefighterId" name="id">
          <!-- 编号 -->
          <div class="row">
            <div class="col-md-4 mb-3">
              <label for="modalNumber" class="form-label">编号</label>
              <input type="text" class="form-control" id="modalNumber" name="number" required>
            </div>
            <!-- 姓名 -->
            <div class="col-md-4 mb-3">
              <label for="modalName" class="form-label">姓名</label>
              <input type="text" class="form-control" id="modalName" name="name" required>
            </div>
            <!-- 性别 -->
            <div class="col-md-4 mb-3">
              <label for="modalGender" class="form-label">性别</label>
              <select class="form-select" id="modalGender" name="gender">
                <option value="">请选择性别</option>
                <option value="男">男</option>
                <option value="女">女</option>
              </select>
            </div>
          </div>

          <div class="row">
            <!-- 出生年月 -->
            <div class="col-md-4 mb-3">
              <label for="modalBirthDate" class="form-label">出生年月</label>
              <input type="date" class="form-control" id="modalBirthDate" name="birthDate">
            </div>
            <!-- 年龄 -->
            <div class="col-md-4 mb-3">
              <label for="modalAge" class="form-label">年龄</label>
              <input type="number" class="form-control" id="modalAge" name="age" readonly>
            </div>
            <!-- 职务 -->
            <div class="col-md-4 mb-3">
              <label for="modalPosition" class="form-label">职务</label>
              <select class="form-select" id="modalPosition" name="position">
                <option value="">请选择职务</option>
                <option value="专职消防员">专职消防员</option>
                <option value="消防文员">消防文员</option>
                <option value="其它">其它</option>
              </select>
            </div>
          </div>

          <div class="row">
            <!-- 单位 -->
            <div class="col-md-6 mb-3">
              <label for="modalTeam" class="form-label">单位</label>
              <select class="form-select" id="modalTeam" name="team">
                <option value="">请选择单位</option>
                <option value="防火战线">防火战线</option>  
                <option value="灭火战线">灭火战线</option>  
                <option value="政治部战线">政治部战线</option>  
                <option value="后勤战线">后勤战线</option>  
                <option value="指挥中心和勤务站">指挥中心和勤务站</option>  
                <option value="战勤保障大队">战勤保障大队</option>  
                <option value="白塔区消防救援大队">白塔区消防救援大队</option>  
                <option value="铁西路消防救援站">铁西路消防救援站</option>  
                <option value="文圣区消防救援大队">文圣区消防救援大队</option>  
                <option value="安康路消防救援站">安康路消防救援站</option>  
                <option value="文昌街消防救援站">文昌街消防救援站</option>  
                <option value="太子河区消防救援大队">太子河区消防救援大队</option>  
                <option value="蔡四路特勤站">蔡四路特勤站</option>  
                <option value="辽阳县消防救援大队">辽阳县消防救援大队</option>  
                <option value="下达河消防救援站">下达河消防救援站</option>  
                <option value="刘二堡消防救援站">刘二堡消防救援站</option>  
                <option value="黄泥洼消防救援站">黄泥洼消防救援站</option>  
                <option value="灯塔市消防救援大队">灯塔市消防救援大队</option>  
                <option value="佟二堡消防救援站">佟二堡消防救援站</option>  
                <option value="铧子消防救援站">铧子消防救援站</option>  
                <option value="宏伟区消防救援大队">宏伟区消防救援大队</option>  
                <option value="万和一路消防救援站">万和一路消防救援站</option>  
                <option value="弓长岭区消防救援大队">弓长岭区消防救援大队</option>  
                <option value="汤泉谷消防救援站">汤泉谷消防救援站</option>  
                <option value="其它">其它</option>
              </select>
            </div>
            <!--工作年限 -->
            <div class="col-md-6 mb-3">
              <label for="modalYear" class="form-label">工作年限</label>
              <select class="form-select" id="modalYear" name="year">
                <option value="">请选择工作年限</option>
                <option value="1年">1年</option>
                <option value="2年">2年</option>
                <option value="3年">3年</option>
                <option value="4年">4年</option>
                <option value="5年">5年</option>
                <option value="6年">6年</option>
                <option value="7年">7年</option>
                <option value="8年">8年</option>
                <option value="9年">9年</option>
                <option value="10年含以上">10年含以上</option>
                <option value="其它">其它</option>
              </select>
            </div>
          </div>

          <div class="row">
            <!-- 身高 -->
            <div class="col-md-3 mb-3">
              <label for="modalShengao" class="form-label">身高</label>
              <input type="number" class="form-control" id="modalShengao" name="shengao" min="1" max="250" placeholder="单位为cm">
            </div>

            <!-- 胸围 -->
            <div class="col-md-3 mb-3">
              <label for="modalXiongwei" class="form-label">胸围</label>
              <input class="form-control" id="modalXiongwei" name="xiongwei" min="1" max="250" placeholder="单位为cm">
            </div>
            <!-- 腰围 -->
            <div class="col-md-3 mb-3">
              <label for="modalYaowei" class="form-label">腰围</label>
              <input class="form-control" id="modalYaowei" name="yaowei" min="1" max="250" placeholder="单位为cm">
            </div>
            <!-- 头围 -->
            <div class="col-md-3 mb-3">
              <label for="modalTouwei" class="form-label">头围</label>
              <select class="form-select" id="modalTouwei" name="touwei">
                <option value="">请选择头围</option>
                <option value="54">54</option>
                <option value="55">55</option>
                <option value="56">56</option>
                <option value="57">57</option>
                <option value="58">58</option>
                <option value="59">59</option>
                <option value="60">60</option>
                <option value="61">61</option>
                <option value="62">62</option>
                <option value="其它">其它</option>
              </select>
            </div>
          </div>


          <div class="row">
            <!-- 鞋类号 -->
            <div class="col-md-4 mb-3">
              <label for="modalXieleihao" class="form-label">鞋类号</label>
              <select class="form-select" id="modalXieleihao" name="xieleihao">
                <option value="">请选择鞋号</option>
                <option value="220">220</option>
                <option value="225">225</option>
                <option value="230">230</option>
                <option value="235">235</option>
                <option value="240">240</option>
                <option value="245">245</option>
                <option value="250">250</option>
                <option value="255">255</option>
                <option value="260">260</option>
                <option value="265">265</option>
                <option value="270">270</option>
                <option value="275">275</option>
                <option value="280">280</option>
                <option value="285">285</option>
                <option value="290">290</option>
                <option value="其它">其它</option>
              </select>
            </div>
            <!-- 服装号 -->
            <div class="col-md-4 mb-3">
              <label for="modalFuzhuanghao" class="form-label">服装号</label>
              <select class="form-select" id="modalFuzhuanghao" name="fuzhuanghao">
                <option value="">请选择服装号</option>
                <option value="160/80">160/80</option>
                <option value="160/84">160/84</option>
                <option value="160/88">160/88</option>
                <option value="160/92">160/92</option>
                <option value="160/96">160/96</option>
                <option value="160/100">160/100</option>
                <option value="160/108">160/108</option>
                <option value="165/80">165/80</option>
                <option value="165/84">165/84</option>
                <option value="165/88">165/88</option>
                <option value="165/92">165/92</option>
                <option value="165/96">165/96</option>
                <option value="165/100">165/100</option>
                <option value="165/104">165/104</option>
                <option value="165/108">165/108</option>
                <option value="170/80">170/80</option>
                <option value="170/84">170/84</option>
                <option value="170/88">170/88</option>
                <option value="170/92">170/92</option>
                <option value="170/96">170/96</option>
                <option value="170/100">170/100</option>
                <option value="170/104">170/104</option>
                <option value="170/108">170/108</option>
                <option value="170/112">170/112</option>
                <option value="175/84">175/84</option>
                <option value="175/88">175/88</option>
                <option value="175/92">175/92</option>
                <option value="175/96">175/96</option>
                <option value="175/100">175/100</option>
                <option value="175/104">175/104</option>
                <option value="175/108">175/108</option>
                <option value="175/112">175/112</option>
                <option value="175/116">175/116</option>
                <option value="175/120">175/120</option>
                <option value="180/88">180/88</option>
                <option value="180/92">180/92</option>
                <option value="180/96">180/96</option>
                <option value="180/100">180/100</option>
                <option value="180/104">180/104</option>
                <option value="180/108">180/108</option>
                <option value="180/112">180/112</option>
                <option value="180/116">180/116</option>
                <option value="180/120">180/120</option>
                <option value="185/92">185/92</option>
                <option value="185/96">185/96</option>
                <option value="185/100">185/100</option>
                <option value="185/104">185/104</option>
                <option value="185/108">185/108</option>
                <option value="185/112">185/112</option>
                <option value="185/116">185/116</option>
                <option value="185/120">185/120</option>
                <option value="190/92">190/92</option>
                <option value="190/96">190/96</option>
                <option value="190/100">190/100</option>
                <option value="190/112">190/112</option>
                <option value="190/116">190/116</option>
                <option value="其它">其它</option>
              </select>
            </div>

            <!-- 帽类号 -->
            <div class="col-md-4 mb-3">
              <label for="modalMaoleihao" class="form-label">帽类号</label>
              <select class="form-select" id="modalMaoleihao" name="maoleihao">
                <option value="">请选择帽号</option>
                <option value="54">54</option>
                <option value="55">55</option>
                <option value="56">56</option>
                <option value="57">57</option>
                <option value="58">58</option>
                <option value="59">59</option>
                <option value="60">60</option>
                <option value="61">61</option>
                <option value="62">62</option>
                <option value="其它">其它</option>
              </select>
            </div>
          </div>

          <div class="row">
            <!-- 可用余额 -->
            <div class="col-md-6 mb-3">
              <label for="modalKeyongyue" class="form-label">可用余额</label>
              <input class="form-control" id="modalKeyongyue" name="keyongyue">
            </div>
            <div class="col-md-6 mb-3">
              <label for="modalJingfeilaiyuan" class="form-label">经费来源</label>
              <select class="form-select" id="modalJingfeilaiyuan" name="jingfeilaiyuan">
                <option value="">请选择经费来源</option>
                <option value="支队经费">支队经费</option>
                <option value="大队经费">大队经费</option>
                <option value="其它">其它</option>
              </select>
            </div>
          </div>

          <div class="row">
            <!-- 备注 -->
            <div class="col-md-12 mb-3">
              <label for="modalRemarks" class="form-label">备注</label>
              <input class="form-control" id="modalRemarks" name="remarks">
            </div>
          </div>
        </form>
      </div>

      <div class="modal-footer">
        <button id="cancelModal" class="button">取消</button>
        <button id="saveFirefighter" class="button">确认添加</button>
      </div>
    </div>
  </div>

  <!-- 模态窗口（用于展示导入的Excel数据） -->
  <div id="importModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2>预览导入的数据</h2>
        <span id="closeImportModal" style="cursor:pointer;">&times;</span>
      </div>
      <div class="modal-body">
        <table id="importPreviewTable" class="users-table">
          <!-- 动态生成表格 -->
        </table>
      </div>
      <div class="modal-footer">
        <button id="confirmImport" class="button">确认导入</button>
        <button id="cancelImport" class="button">取消</button>
      </div>
    </div>
  </div>

  <!-- 添加单位变更模态窗口 -->
  <div id="changeTeamModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2>实力单位变更</h2>
        <span id="closeChangeTeamModal" style="cursor:pointer;">&times;</span>
      </div>
      <div class="modal-body">
        <table id="changeTeamTable" class="users-table">
          <thead>
            <tr>
              <th>编号</th>
              <th>姓名</th>
              <th>性别</th>
              <th>年龄</th>
              <th>现单位</th>
              <th>变更单位</th>
              <th>操作</th>
            </tr>
          </thead>
          <tbody>
            <!-- 数据将动态填充 -->
          </tbody>
        </table>
      </div>
      <div class="modal-footer">
        <button id="submitChangeTeam" class="button">确认提交</button>
        <button id="cancelChangeTeam" class="button">取消</button>
      </div>
    </div>
  </div>

  <!-- 背景遮罩 -->
  <div class="modal-backdrop" id="reportModalBackdrop"></div>

  <!-- 报表选择模态窗口 -->
  <div id="reportModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2>打印报表</h2>
        <span class="close" onclick="closeReportModal()">&times;</span>
      </div>

      <div class="modal-body">
        <form id="reportForm">

          <div class="row">
            <div class="col-md-12 mb-3">
              <label for="reportType">报表类型：</label>
              <select id="reportType" class="form-control">
                <option value="personnel">人员基本信息表</option>
                <option value="equipment">人员装备配发表</option>
                <option value="bodySize">人员体型尺寸表</option>
                <option value="teamSummary">队伍人员统计表</option>
                <option value="changeHistory">单位变更记录表</option>
              </select>
            </div>
          </div>

          <div class="row">
            <div class="col-md-12 mb-3">
              <label for="teamFilter">单位筛选：</label>
              <select id="teamFilter" class="form-control">
                <option value="">全部单位</option>
                <option value="防火战线">防火战线</option>  
                <option value="灭火战线">灭火战线</option>  
                <option value="政治部战线">政治部战线</option>  
                <option value="后勤战线">后勤战线</option>  
                <option value="指挥中心和勤务站">指挥中心和勤务站</option>  
                <option value="战勤保障大队">战勤保障大队</option>  
                <option value="白塔区消防救援大队">白塔区消防救援大队</option>  
                <option value="铁西路消防救援站">铁西路消防救援站</option>  
                <option value="文圣区消防救援大队">文圣区消防救援大队</option>  
                <option value="安康路消防救援站">安康路消防救援站</option>  
                <option value="文昌街消防救援站">文昌街消防救援站</option>  
                <option value="太子河区消防救援大队">太子河区消防救援大队</option>  
                <option value="蔡四路特勤站">蔡四路特勤站</option>  
                <option value="辽阳县消防救援大队">辽阳县消防救援大队</option>  
                <option value="下达河消防救援站">下达河消防救援站</option>  
                <option value="刘二堡消防救援站">刘二堡消防救援站</option>  
                <option value="黄泥洼消防救援站">黄泥洼消防救援站</option>  
                <option value="灯塔市消防救援大队">灯塔市消防救援大队</option>  
                <option value="佟二堡消防救援站">佟二堡消防救援站</option>  
                <option value="铧子消防救援站">铧子消防救援站</option>  
                <option value="宏伟区消防救援大队">宏伟区消防救援大队</option>  
                <option value="万和一路消防救援站">万和一路消防救援站</option>  
                <option value="弓长岭区消防救援大队">弓长岭区消防救援大队</option>  
                <option value="汤泉谷消防救援站">汤泉谷消防救援站</option>  
                <option value="其它">其它</option>
                <!-- 其他单位选项，与之前的单位列表保持一致 -->
              </select>
            </div>
          </div>

          <!-- 人员信息报表筛选条件 -->
          <div id="personnelFilters" class="filter-group" style="width: 100%; padding: 0; margin: 0;">
            <div class="row">
              <div class="col-md-4 mb-3">
                <label for="genderFilter">性别筛选：</label>
                <select id="genderFilter" class="form-control">
                  <option value="">全部</option>
                  <option value="男">男</option>
                  <option value="女">女</option>
                </select>
              </div>

              <div class="col-md-4 mb-3">
                <label for="ageMin">最小年龄：</label>
                <input type="number" id="ageMin" class="form-control">
              </div>
              <div class="col-md-4 mb-3">
                <label for="ageMax">最大年龄：</label>
                <input type="number" id="ageMax" class="form-control">
              </div>
            </div>

            <div class="row">
              <div class="col-md-4 mb-3">
                <label for="positionFilter">职务筛选：</label>
                <select id="positionFilter" class="form-control">
                  <option value="">全部职务</option>
                  <option value="专职消防员">专职消防员</option>
                  <option value="消防文员">消防文员</option>
                  <option value="其它">其它</option>
                </select>
              </div>

              <div class="col-md-4 mb-3">
                <label for="yearMin">最短工作年限：</label>
                <select id="yearMinFilter" class="form-control">
                  <option value="">不限</option>
                  <option value="1年">1年</option>
                  <option value="2年">2年</option>
                  <option value="3年">3年</option>
                  <option value="4年">4年</option>
                  <option value="5年">5年</option>
                  <option value="6年">6年</option>
                  <option value="7年">7年</option>
                  <option value="8年">8年</option>
                  <option value="9年">9年</option>
                  <option value="10年含以上">10年含以上</option>
                </select>
              </div>

              <div class="col-md-4 mb-3">
                <label for="yearMax">最长工作年限：</label>
                <select id="yearMaxFilter" class="form-control">
                  <option value="">不限</option>
                  <option value="1年">1年</option>
                  <option value="2年">2年</option>
                  <option value="3年">3年</option>
                  <option value="4年">4年</option>
                  <option value="5年">5年</option>
                  <option value="6年">6年</option>
                  <option value="7年">7年</option>
                  <option value="8年">8年</option>
                  <option value="9年">9年</option>
                  <option value="10年含以上">10年含以上</option>
                </select>
              </div>
            </div>
          </div>

          <!-- 装备配发筛选条件 -->
          <div id="equipmentFilters" class="filter-group" style="display:none; width: 100%; padding: 0; margin: 0;">
            <div class="row">
              <div class="col-md-4 mb-3">
                <label for="hatSizeFilter">帽类号筛选：</label>
                <select id="hatSizeFilter" class="form-control">
                  <option value="">全部</option>
                  <option value="54">54</option>
                  <option value="55">55</option>
                  <option value="56">56</option>
                  <option value="57">57</option>
                  <option value="58">58</option>
                  <option value="59">59</option>
                  <option value="60">60</option>
                  <option value="61">61</option>
                  <option value="62">62</option>
                  <option value="其它">其它</option>
                </select>
              </div>

              <div class="col-md-4 mb-3">
                <label for="clothingSizeFilter">服装号筛选：</label>
                <select id="clothingSizeFilter" class="form-control">
                  <option value="">全部</option>
                  <option value="160/80">160/80</option>
                  <option value="160/84">160/84</option>
                  <option value="160/88">160/88</option>
                  <option value="160/92">160/92</option>
                  <option value="160/96">160/96</option>
                  <option value="160/100">160/100</option>
                  <option value="160/108">160/108</option>
                  <option value="165/80">165/80</option>
                  <option value="165/84">165/84</option>
                  <option value="165/88">165/88</option>
                  <option value="165/92">165/92</option>
                  <option value="165/96">165/96</option>
                  <option value="165/100">165/100</option>
                  <option value="165/104">165/104</option>
                  <option value="165/108">165/108</option>
                  <option value="170/80">170/80</option>
                  <option value="170/84">170/84</option>
                  <option value="170/88">170/88</option>
                  <option value="170/92">170/92</option>
                  <option value="170/96">170/96</option>
                  <option value="170/100">170/100</option>
                  <option value="170/104">170/104</option>
                  <option value="170/108">170/108</option>
                  <option value="170/112">170/112</option>
                  <option value="175/84">175/84</option>
                  <option value="175/88">175/88</option>
                  <option value="175/92">175/92</option>
                  <option value="175/96">175/96</option>
                  <option value="175/100">175/100</option>
                  <option value="175/104">175/104</option>
                  <option value="175/108">175/108</option>
                  <option value="175/112">175/112</option>
                  <option value="175/116">175/116</option>
                  <option value="175/120">175/120</option>
                  <option value="180/88">180/88</option>
                  <option value="180/92">180/92</option>
                  <option value="180/96">180/96</option>
                  <option value="180/100">180/100</option>
                  <option value="180/104">180/104</option>
                  <option value="180/108">180/108</option>
                  <option value="180/112">180/112</option>
                  <option value="180/116">180/116</option>
                  <option value="180/120">180/120</option>
                  <option value="185/92">185/92</option>
                  <option value="185/96">185/96</option>
                  <option value="185/100">185/100</option>
                  <option value="185/104">185/104</option>
                  <option value="185/108">185/108</option>
                  <option value="185/112">185/112</option>
                  <option value="185/116">185/116</option>
                  <option value="185/120">185/120</option>
                  <option value="190/92">190/92</option>
                  <option value="190/96">190/96</option>
                  <option value="190/100">190/100</option>
                  <option value="190/112">190/112</option>
                  <option value="190/116">190/116</option>
                  <option value="其它">其它</option>
                </select>
              </div>

              <div class="col-md-4 mb-3">
                <label for="shoeSizeFilter">鞋类号筛选：</label>
                <select id="shoeSizeFilter" class="form-control">
                  <option value="">全部</option>
                  <option value="220">220</option>
                  <option value="225">225</option>
                  <option value="230">230</option>
                  <option value="235">235</option>
                  <option value="240">240</option>
                  <option value="245">245</option>
                  <option value="250">250</option>
                  <option value="255">255</option>
                  <option value="260">260</option>
                  <option value="265">265</option>
                  <option value="270">270</option>
                  <option value="275">275</option>
                  <option value="280">280</option>
                  <option value="285">285</option>
                  <option value="290">290</option>
                  <option value="其它">其它</option>
                </select>
              </div>
            </div>
          </div>

          <!-- 体型尺寸筛选条件 -->
          <div id="bodySizeFilters" class="filter-group" style="display:none; width: 100%; padding: 0; margin: 0;">
            <div class="row">
              <div class="col-md-3 mb-3">
                <label for="heightMin">最小身高(CM)：</label>
                <input type="number" id="heightMin" class="form-control">
              </div>
              <div class="col-md-3 mb-3">
                <label for="heightMax">最大身高(CM)：</label>
                <input type="number" id="heightMax" class="form-control">
              </div>


              <div class="col-md-3 mb-3">
                <label for="chestMin">最小胸围(CM)：</label>
                <input type="number" id="chestMin" class="form-control">
              </div>
              <div class="col-md-3 mb-3">
                <label for="chestMax">最大胸围(CM)：</label>
                <input type="number" id="chestMax" class="form-control">
              </div>
            </div>

            <div class="row">
              <div class="col-md-3 mb-3">
                <label for="waistMin">最小腰围(CM)：</label>
                <input type="number" id="waistMin" class="form-control">
              </div>
              <div class="col-md-3 mb-3">
                <label for="waistMax">最大腰围(CM)：</label>
                <input type="number" id="waistMax" class="form-control">
              </div>

              <div class="col-md-3 mb-3">
                <label for="headMin">最小头围(CM)：</label>
                <input type="number" id="headMin" class="form-control">
              </div>
              <div class="col-md-3 mb-3">
                <label for="headMax">最大头围(CM)：</label>
                <input type="number" id="headMax" class="form-control">
              </div>
            </div>
          </div>

          <!-- 单位变更记录筛选条件 -->
          <div id="changeHistoryFilters" class="filter-group" style="display:none; width: 100%; padding: 0; margin: 0;">
            <div class="row">
              <div class="col-md-4 mb-3">
                <label for="startDate">开始日期：</label>
                <input type="date" id="startDate" class="form-control">
              </div>
              <div class="col-md-4 mb-3">
                <label for="endDate">结束日期：</label>
                <input type="date" id="endDate" class="form-control">
              </div>

              <div class="col-md-4 mb-3">
                <label for="oldTeamFilter">原单位筛选：</label>
                <select id="oldTeamFilter" class="form-control">
                  <option value="">全部单位</option>
                  <option value="防火战线">防火战线</option>  
                  <option value="灭火战线">灭火战线</option>  
                  <option value="政治部战线">政治部战线</option>  
                  <option value="后勤战线">后勤战线</option>  
                  <option value="指挥中心和勤务站">指挥中心和勤务站</option>  
                  <option value="战勤保障大队">战勤保障大队</option>  
                  <option value="白塔区消防救援大队">白塔区消防救援大队</option>  
                  <option value="铁西路消防救援站">铁西路消防救援站</option>  
                  <option value="文圣区消防救援大队">文圣区消防救援大队</option>  
                  <option value="安康路消防救援站">安康路消防救援站</option>  
                  <option value="文昌街消防救援站">文昌街消防救援站</option>  
                  <option value="太子河区消防救援大队">太子河区消防救援大队</option>  
                  <option value="蔡四路特勤站">蔡四路特勤站</option>  
                  <option value="辽阳县消防救援大队">辽阳县消防救援大队</option>  
                  <option value="下达河消防救援站">下达河消防救援站</option>  
                  <option value="刘二堡消防救援站">刘二堡消防救援站</option>  
                  <option value="黄泥洼消防救援站">黄泥洼消防救援站</option>  
                  <option value="灯塔市消防救援大队">灯塔市消防救援大队</option>  
                  <option value="佟二堡消防救援站">佟二堡消防救援站</option>  
                  <option value="铧子消防救援站">铧子消防救援站</option>  
                  <option value="宏伟区消防救援大队">宏伟区消防救援大队</option>  
                  <option value="万和一路消防救援站">万和一路消防救援站</option>  
                  <option value="弓长岭区消防救援大队">弓长岭区消防救援大队</option>  
                  <option value="汤泉谷消防救援站">汤泉谷消防救援站</option>  
                  <option value="其它">其它</option>
                  <!-- 其他单位选项，与之前的单位列表保持一致 -->
                </select>
              </div>
            </div>
          </div>

          <!-- 排序选项 -->
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="sortField">排序字段：</label>
              <select id="sortField" class="form-control">
                <option value="">默认排序</option>
                <option value="number">按编号</option>
                <option value="name">按姓名</option>
                <option value="age">按年龄</option>
                <!-- 动态显示基于报表类型的排序选项 -->
              </select>
            </div>

            <div class="col-md-6 mb-3">
              <label for="sortOrder">排序方式：</label>
              <select id="sortOrder" class="form-control">
                <option value="asc">升序</option>
                <option value="desc">降序</option>
              </select>
            </div>
          </div>


          <div class="row">
            <div class="col-md-12 mb-3">
              <label>输出格式：</label>
              <div class="radio-group">
                <label>
                  <input type="radio" name="outputFormat" value="print" checked> 打印
                </label>
                <label>
                  <input type="radio" name="outputFormat" value="pdf"> PDF
                </label>
                <label>
                  <input type="radio" name="outputFormat" value="excel"> Excel
                </label>
              </div>
            </div>
          </div>
        </form>
      </div>

      <div class="modal-footer">
        <button onclick="generateReport()" class="button">生成报表</button>
        <button onclick="closeReportModal()" class="button">取消</button>
      </div>
    </div>
  </div>

<!-- 批量修改经费-模态框 -->  
<div id="batchFundsModal" class="modal">  
  <div class="modal-content">  
    <div class="modal-header">  
      <h2>批量修改经费</h2>  
      <span id="closeBatchFundsModal" style="cursor: pointer;">&times;</span>  
    </div>  
    <div class="modal-body">  
      <form id="batchFundsForm" class="search-form">  

        <!-- 可用余额 -->  
        <div class="form-group" style="margin-bottom: 15px;">  
          <label for="newBalance" class="form-label">新的可用余额</label>  
          <input type="number" id="newBalance" name="newBalance"   
                 placeholder="请输入新的可用余额！" required>  
        </div>  

        <!-- 经费来源 -->  
        <div class="form-group" style="margin-bottom: 15px;">  
          <label for="newFundSource" class="form-label">新的经费来源</label>  
          <select class="form-select" id="newFundSource" name="newFundSource" required>
            <option value="">请选择经费来源</option>
            <option value="支队经费">支队经费</option>
            <option value="大队经费">大队经费</option>
            <option value="其它">其它</option>
          </select>                 
        </div>  

      </form>  
    </div>  
    <div class="modal-footer">  
      <button class="button" id="cancelBatchFundsBtn">取消</button>  
      <button class="button" id="confirmBatchFundsBtn">确定</button>  
    </div>  
  </div>  
</div>  


  <script>


const pageSize = 10; // 每页显示10条数据  
let currentPage = 1; 
let totalPages = 1;  


    // 页面加载时获取消防员列表  
    document.addEventListener('DOMContentLoaded', function () {
      loadFirefighters();

      // 全选/取消全选功能  
      document.addEventListener('click', function (e) {
        if (e.target && e.target.id === 'selectAll') {
          const checkboxes = document.querySelectorAll('.row-checkbox');
          checkboxes.forEach(checkbox => {
            checkbox.checked = e.target.checked;
          });
        }
      });

      // 监听表格中的checkbox变化  
      document.addEventListener('change', function (e) {
        if (e.target && e.target.classList.contains('row-checkbox')) {
          // 更新全选框状态  
          const allCheckboxes = document.querySelectorAll('.row-checkbox');
          const checkedCount = document.querySelectorAll('.row-checkbox:checked').length;
          document.getElementById('selectAll').checked = checkedCount === allCheckboxes.length && allCheckboxes.length > 0;
        }
      });


// 拿到各元素  
const batchUpdateFundsBtn = document.getElementById('batchUpdateFundsBtn');  
const batchFundsModal = document.getElementById('batchFundsModal');  
const closeBatchFundsModal = document.getElementById('closeBatchFundsModal');  
const cancelBatchFundsBtn = document.getElementById('cancelBatchFundsBtn');  
const confirmBatchFundsBtn = document.getElementById('confirmBatchFundsBtn');  

// 打开模态  
batchUpdateFundsBtn.addEventListener('click', () => {
    // 2. 在“实力信息列表”中找出所有选中项  
  //    例如：<input type="checkbox" class="select-checkbox" data-id="xxx" />
  const selectedIds = Array.from(document.querySelectorAll('.row-checkbox:checked'))
  .map(checkbox => checkbox.getAttribute('data-id'));

  if (selectedIds.length === 0) {  
    alert('请先在列表中勾选要批量修改的人员！');  
    return;  
  }    
  batchFundsModal.style.display = 'block';  
});  

// 关闭模态  
function closeBatchFunds() {  
  batchFundsModal.style.display = 'none';  
  // 清空表单(可选)  
  document.getElementById('batchFundsForm').reset();  
}  
closeBatchFundsModal.addEventListener('click', closeBatchFunds);  
cancelBatchFundsBtn.addEventListener('click', closeBatchFunds);  

// 点击“确定” → 批量更新  
confirmBatchFundsBtn.addEventListener('click', () => {  
  // 2. 在“实力信息列表”中找出所有选中项  
  //    例如：<input type="checkbox" class="select-checkbox" data-id="xxx" />
  const selectedIds = Array.from(document.querySelectorAll('.row-checkbox:checked'))
  .map(checkbox => checkbox.getAttribute('data-id'));

  if (selectedIds.length === 0) {  
    alert('请先在列表中勾选要批量修改的人员！');  
    return;  
  }  
  // 1. 获取表单输入  
  const newBalance = document.getElementById('newBalance').value.trim();  
  const newFundSource = document.getElementById('newFundSource').value;  
  if (!newBalance || !newFundSource) {  
    alert('请先填写新的可用余额和选择经费来源！');  
    return;  
  }  

  // 3. 发送请求到后端，进行批量更新  
  const payload = {  
    ids: selectedIds,  
    newBalance: parseFloat(parseFloat(newBalance).toFixed(2)),  
    newFundSource: newFundSource  
  };  

  fetch('/firefighters/bulkUpdateFunds', {  
    method: 'POST',  
    headers: { 'Content-Type': 'application/json' },  
    body: JSON.stringify(payload)  
  })  
    .then(res => res.json())  
    .then(result => {  
      if (result.success) {  
        alert('批量更新经费成功！');  
        // 刷新页面或重新加载列表  
        // e.g. loadFirefightersList();  
        loadFirefighters();
        // 关闭模态并清空表单  
        closeBatchFunds();  
      } else {  
        alert('批量更新经费失败：' + (result.error || '未知错误'));  
      }  
    })  
    .catch(err => {  
      console.error(err);  
      alert('请求异常：' + err);  
    });  
});  


      // 批量删除按钮事件  
      document.getElementById('batchDeleteBtn').addEventListener('click', function () {
        const selectedRows = document.querySelectorAll('.row-checkbox:checked');
        if (selectedRows.length === 0) {
          alert('请先选择需要删除的人员');
          return;
        }
        batchDeleteFirefighters();
      });

      // 重新绑定事件  
      const reportTypeElem = document.getElementById('reportType');
      if (reportTypeElem) {
        // 先移除旧的事件监听器以避免重复  
        reportTypeElem.removeEventListener('change', updateFilterOptions);
        // 添加新的事件监听器  
        reportTypeElem.addEventListener('change', updateFilterOptions);
        // 初始调用一次  
        updateFilterOptions();
      }


    });

    // 批量删除功能  
    function batchDeleteFirefighters() {
      const selectedIds = Array.from(document.querySelectorAll('.row-checkbox:checked'))
        .map(checkbox => checkbox.getAttribute('data-id'));

      if (selectedIds.length === 0) {
        alert('请先选择要删除的记录');
        return;
      }

      if (confirm(`确定要删除选中的 ${selectedIds.length} 条记录吗？`)) {
        fetch('/firefighters/batch-delete', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ ids: selectedIds })
        })
          .then(response => response.json())
          .then(result => {
            if (result.success) {
              alert(`成功删除 ${result.deletedCount} 条记录`);
              loadFirefighters(); // 刷新表格  
            } else {
              alert('删除失败：' + result.error);
            }
          })
          .catch(err => {
            console.error(err);
            alert('操作失败，请稍后重试');
          });
      }
    }


    // 加载消防员数据并填充表格  
    function loadFirefighters(queryParams = {}) {
      const queryString = new URLSearchParams(queryParams).toString();
      fetch('/firefighters/list?' + queryString)
        .then(response => response.json())
        .then(data => {
            const tbody = document.querySelector('#firefightersTable tbody');

            const pageInfo = document.getElementById('pageInfo');  
            const prevPageBtn = document.getElementById('prevPage');  
            const nextPageBtn = document.getElementById('nextPage');  

            // 计算总页数  
            totalPages = Math.ceil(data.length / pageSize);  

            // 计算当前页的数据范围  
            const start = (currentPage - 1) * pageSize;  
            const end = start + pageSize;  
            const pageData = data.slice(start, end);

          tbody.innerHTML = ''; // 清空当前表格内容  


          pageData.forEach(item => {
            const tr = document.createElement('tr');
            tr.innerHTML = generateTableRow(item);
            tbody.appendChild(tr);
          });
 
            // 更新页码信息  
            pageInfo.textContent = `第 ${currentPage} / ${totalPages} 页`;  

            // 控制按钮状态  
            prevPageBtn.disabled = currentPage === 1;  
            nextPageBtn.disabled = currentPage === totalPages; 
        })
        .catch(err => console.error(err));
    }
    

    function changePage(direction) {  
            currentPage += direction;  

            // 确保页码在合理范围内  
            currentPage = Math.max(1, Math.min(currentPage, totalPages));  

      const queryParams = {
        number: document.getElementById('searchNumber').value.trim(),
        name: document.getElementById('searchName').value.trim(),
        gender: document.getElementById('searchGender').value,
        ageMin: document.getElementById('searchAgeMin').value,
        ageMax: document.getElementById('searchAgeMax').value,
        position: document.getElementById('searchPosition').value.trim(),
        team: document.getElementById('searchTeam').value.trim(),
        year: document.getElementById('searchYear').value.trim(),
        // 可以继续添加其他搜索条件  
      };
      loadFirefighters(queryParams);

        }
        
        function changePage1() {  
            currentPage = 1; 
      const queryParams = {
        number: document.getElementById('searchNumber').value.trim(),
        name: document.getElementById('searchName').value.trim(),
        gender: document.getElementById('searchGender').value,
        ageMin: document.getElementById('searchAgeMin').value,
        ageMax: document.getElementById('searchAgeMax').value,
        position: document.getElementById('searchPosition').value.trim(),
        team: document.getElementById('searchTeam').value.trim(),
        year: document.getElementById('searchYear').value.trim(),
        // 可以继续添加其他搜索条件  
      };
      loadFirefighters(queryParams);             
        }  
        
        
        function changePageN(direction) {  
            currentPage = totalPages;
            
      const queryParams = {
        number: document.getElementById('searchNumber').value.trim(),
        name: document.getElementById('searchName').value.trim(),
        gender: document.getElementById('searchGender').value,
        ageMin: document.getElementById('searchAgeMin').value,
        ageMax: document.getElementById('searchAgeMax').value,
        position: document.getElementById('searchPosition').value.trim(),
        team: document.getElementById('searchTeam').value.trim(),
        year: document.getElementById('searchYear').value.trim(),
        // 可以继续添加其他搜索条件  
      };
      loadFirefighters(queryParams);            
        }          


    // 生成表格行的HTML  
    function generateTableRow(item) {
      return `
        <td><input type="checkbox" class="row-checkbox" data-id="${item.objectId}"></td>  
        <td>${item.number}</td>  
        <td>${item.name}</td>  
        <td>${item.gender}</td>  
        <td>${item.birthDate || ''}</td>  
        <td>${item.age || ''}</td>  
        <td>${item.position || ''}</td>  
        <td>${item.team || ''}</td>  
        <td>${item.year || ''}</td>  
        <td>${item.maoleihao || ''}</td>  
        <td>${item.fuzhuanghao || ''}</td>  
        <td>${item.xieleihao || ''}</td>  
        <td>${item.shengao || ''}</td>  
        <td>${item.xiongwei || ''}</td>  
        <td>${item.yaowei || ''}</td>  
        <td>${item.touwei || ''}</td>  
        <td>${item.keyongyue || ''}</td>
        <td>${item.jingfeilaiyuan || ''}</td>           
        <td>${item.remarks || ''}</td>  
        <td>  
        <div style="display: flex; flex-direction: column; align-items: center; gap: 2px;">  
          <button onclick="showEditFirefighterModal('${item.objectId}')" class="btn-change1">修改</button>  
          <button onclick="deleteFirefighter('${item.objectId}')" class="btn-delete1">删除</button>  
        </div>  
        </td> 
      `;
    }

    // 删除消防员信息  
    function deleteFirefighter(id) {
      if (!confirm('确定要删除该实力信息吗？')) return;

      fetch(`/firefighters/delete/${id}`, { method: 'DELETE' })
        .then(response => response.json())
        .then(result => {
          if (result.success) {
            alert('删除成功');
            console.log(`${id} 删除成功`);
            loadFirefighters(); // 刷新表格  
          } else {
            alert('删除失败：' + result.error);
          }
        })
        .catch(err => console.error(err));
    }

    // 显示添加消防员的模态窗口  
    function showAddFirefighterModal() {
      document.getElementById('modalTitle').innerText = '添加实力';
      clearModalForm();
      document.getElementById('firefighterId').value = ''; // 清空ID 
      document.getElementById('saveFirefighter').innerText = '确认添加'; // 设置按钮文字 
      const numberInput = document.getElementById('modalNumber'); // 获取 DOM 元素
      numberInput.removeAttribute('readonly'); // 移除 'readonly' 属性  
      document.getElementById('firefighterModal').style.display = 'block';
      document.getElementById('modalBackdrop').style.display = 'block';
    }

    // 显示修改消防员的模态窗口  
    function showEditFirefighterModal(id) {
      fetch(`/firefighters/get/${id}`)
        .then(response => response.json())
        .then(item => {
          document.getElementById('modalTitle').innerText = '修改实力信息';
          document.getElementById('saveFirefighter').innerText = '确认修改'; // 设置按钮文字
          const numberInput = document.getElementById('modalNumber'); // 获取 DOM 元素
          numberInput.setAttribute('readonly', true); // 确保编号框不可编辑 
          fillModalForm(item);
          document.getElementById('firefighterModal').style.display = 'block';
          document.getElementById('modalBackdrop').style.display = 'block';
        })
        .catch(err => console.error(err));

    }
    // 填充模态窗口表单数据  
    function fillModalForm(item) {
      document.getElementById('firefighterId').value = item.objectId || '';
      document.getElementById('modalNumber').value = item.number || '';
      document.getElementById('modalName').value = item.name || '';
      document.getElementById('modalGender').value = item.gender || '';
      document.getElementById('modalBirthDate').value = item.birthDate || '';
      document.getElementById('modalAge').value = item.age || '';
      document.getElementById('modalPosition').value = item.position || '';
      document.getElementById('modalTeam').value = item.team || '';
      document.getElementById('modalYear').value = item.year || '';
      document.getElementById('modalMaoleihao').value = item.maoleihao || '';
      document.getElementById('modalFuzhuanghao').value = item.fuzhuanghao || '';
      document.getElementById('modalXieleihao').value = item.xieleihao || '';
      document.getElementById('modalShengao').value = item.shengao || '';
      document.getElementById('modalXiongwei').value = item.xiongwei || '';
      document.getElementById('modalYaowei').value = item.yaowei || '';
      document.getElementById('modalTouwei').value = item.touwei || '';
      document.getElementById('modalKeyongyue').value = item.keyongyue || '';
      document.getElementById('modalJingfeilaiyuan').value = item.jingfeilaiyuan || '';
      document.getElementById('modalRemarks').value = item.remarks || '';
    }

    // 清空模态窗口表单数据  
    function clearModalForm() {
      document.getElementById('firefighterForm').reset();
      // 清除错误提示  
      clearErrorMessages();
    }

    // 关闭模态窗口  
    document.getElementById('closeModal').onclick = function () {
      document.getElementById('firefighterModal').style.display = 'none';
      document.getElementById('modalBackdrop').style.display = 'none';
    };
    document.getElementById('cancelModal').onclick = function () {
      document.getElementById('firefighterModal').style.display = 'none';
      document.getElementById('modalBackdrop').style.display = 'none';
    };

    // 保存消防员（添加或修改）  
    document.getElementById('saveFirefighter').onclick = function () {
      const id = document.getElementById('firefighterId').value;
      const form = document.getElementById('firefighterForm');
      const formData = {};
      const inputs = form.querySelectorAll('input, select');
      let valid = true;

      // 清理之前的错误提示  
      clearErrorMessages();

      // 1. 提取表单数据并验证  
      inputs.forEach(input => {
        if (input.required && input.value.trim() === '') {
          displayErrorMessage(input, `字段 "${input.previousElementSibling.innerText}" 是必填项！`);
          valid = false;
        } else {
          if (input.name === 'keyongyue') {
            formData[input.name] = parseFloat(parseFloat(input.value.trim()).toFixed(2))          
          } else {
          formData[input.name] = input.value.trim();            
          }
        }
      });

      if (!valid) return;

      let url, method;
      if (id) {
        // 更新  
        url = `/firefighters/update/${id}`;
        method = 'PUT';
      } else {
        // 添加  
        url = '/firefighters/add';
        method = 'POST';
      }

      fetch(url, {
        method: method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      })
        .then(response => response.json())
        .then(result => {
          if (result.success) {
            alert('保存成功');
            document.getElementById('firefighterModal').style.display = 'none';
            document.getElementById('modalBackdrop').style.display = 'none';
            loadFirefighters();
          } else {
            // 处理编号重复的错误  
            if (result.error.includes('编号')) {
              displayErrorMessage(document.getElementById('modalNumber'), result.error);
            } else {
              alert('保存失败：' + result.error);
            }
          }
        })
        .catch(err => console.error(err));
    };

    // 显示字段错误信息  
    function displayErrorMessage(input, message) {
      input.classList.add('error'); // 给输入框加错误样式  
      const errorSpan = document.createElement('span');
      errorSpan.className = 'error-message';
      errorSpan.textContent = message;
      input.parentNode.appendChild(errorSpan); // 在输入框父容器中添加错误提示  
    }

    // 清理所有错误提示  
    function clearErrorMessages() {
      const errorMessages = document.querySelectorAll('.error-message');
      errorMessages.forEach(msg => msg.remove()); // 删除错误信息  
      const errorInputs = document.querySelectorAll('.error');
      errorInputs.forEach(input => input.classList.remove('error')); // 移除错误标识  
    }

    // 搜索功能  
    function searchFirefighters() {
      const queryParams = {
        number: document.getElementById('searchNumber').value.trim(),
        name: document.getElementById('searchName').value.trim(),
        gender: document.getElementById('searchGender').value,
        ageMin: document.getElementById('searchAgeMin').value,
        ageMax: document.getElementById('searchAgeMax').value,
        position: document.getElementById('searchPosition').value.trim(),
        team: document.getElementById('searchTeam').value.trim(),
        year: document.getElementById('searchYear').value.trim(),
        // 可以继续添加其他搜索条件  
      };
      loadFirefighters(queryParams);
    }

    // 重置搜索条件  
    function resetSearch() {
      document.getElementById('searchForm').reset();
      loadFirefighters();
    }

    // 导入Excel文件表单提交  
    document.getElementById('importForm').addEventListener('submit', function (event) {
      event.preventDefault();

      const fileInput = document.getElementById('excelFile');
      const file = fileInput.files[0];
      if (!file) {
        alert('请选择Excel文件');
        return;
      }

      const formData = new FormData();
      formData.append('excelFile', file);

      fetch('/firefighters/import-preview', {
        method: 'POST',
        body: formData
      })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // 显示模态窗口并展示预览数据  
            showImportModal(data.previewData);
          } else {
            alert('预览失败：' + data.error);
          }
        })
        .catch(err => console.error(err));
    });

    // 显示导入模态窗口  
    function showImportModal(previewData) {
      const modal = document.getElementById('importModal');
      const closeModalBtn = document.getElementById('closeImportModal');
      const confirmBtn = document.getElementById('confirmImport');
      const cancelBtn = document.getElementById('cancelImport');
      const previewTable = document.getElementById('importPreviewTable');

      // 清空预览表格内容  
      previewTable.innerHTML = '';

      if (previewData.length === 0) {
        previewTable.innerHTML = '<p>没有可预览的数据。</p>';
        return;
      }

      // 动态生成表格头  
      const headers = Object.keys(previewData[0]);
      const thead = document.createElement('thead');
      const headerRow = document.createElement('tr');
      headers.forEach(header => {
        const th = document.createElement('th');
        th.textContent = header;
        headerRow.appendChild(th);
      });
      thead.appendChild(headerRow);
      previewTable.appendChild(thead);

      // 动态生成表格体  
      const tbody = document.createElement('tbody');
      previewData.forEach(item => {
        const tr = document.createElement('tr');
        headers.forEach(header => {
          const td = document.createElement('td');
          td.textContent = item[header] !== undefined ? item[header] : '';
          tr.appendChild(td);
        });
        tbody.appendChild(tr);
      });
      previewTable.appendChild(tbody);

      // 显示模态窗口  
      modal.style.display = 'block';

      // 关闭模态窗口事件  
      closeModalBtn.onclick = () => {
        modal.style.display = 'none';
      };
      cancelBtn.onclick = () => {
        modal.style.display = 'none';
      };

      // 确认导入事件  
      confirmBtn.onclick = () => {
        fetch('/firefighters/import-confirm', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ data: previewData })
        })
          .then(response => response.json())
          .then(result => {
            if (result.success) {
              // 构建详细反馈信息  
              const message = `  
                导入完成：  
                成功导入：${result.saved} 条记录。  
                跳过：${result.skipped} 条记录。  
              `;

              // 显示跳过记录详情  
              if (result.skipped > 0) {
                const skippedDetails = result.details.skipped.map(item => {
                  return `编号: ${item.data.number || '未知'}, 原因: ${item.reason}`;
                }).join('\n');

                alert(`${message}\n跳过详情：\n${skippedDetails}`);
              } else {
                alert(message);
              }

              // 隐藏模态窗口，重新加载列表  
              modal.style.display = 'none';
              loadFirefighters(); // 调用现有的列表加载逻辑  
            } else {
              alert('导入失败：' + result.error);
            }
          })
          .catch(err => console.error('导入请求失败：', err));
      };
    }

    // 点击模态窗口外部关闭模态窗口  
    window.onclick = function (event) {
      const firefighterModal = document.getElementById('firefighterModal');
      const importModal = document.getElementById('importModal');
      if (event.target == firefighterModal) {
        firefighterModal.style.display = 'none';
        document.getElementById('modalBackdrop').style.display = 'none';
      }
      if (event.target == importModal) {
        importModal.style.display = 'none';
      }
    };

    // 获取出生日期输入框  
    const birthDateInput = document.getElementById("modalBirthDate");
    // 获取年龄输入框  
    const ageInput = document.getElementById("modalAge");

    // 注册监听事件：当日期发生变动时  
    birthDateInput.addEventListener("change", () => {
      const birthDateValue = birthDateInput.value; // 形如 "2023-03-05"  

      if (!birthDateValue) {
        // 清空或保留  
        ageInput.value = "";
        return;
      }

      const birthDate = new Date(birthDateValue);
      if (isNaN(birthDate)) {
        // 非法日期（理论上不太会发生，但可做防御性处理）  
        ageInput.value = "";
        return;
      }

      const today = new Date();
      let age = today.getFullYear() - birthDate.getFullYear();

      // 计算是否过了生日（月份或日期）  
      const monthDiff = today.getMonth() - birthDate.getMonth();
      const dayDiff = today.getDate() - birthDate.getDate();
      if (monthDiff < 0 || (monthDiff === 0 && dayDiff < 0)) {
        age--;
      }

      // 若年龄小于0，可根据需要设为0或空字符串  
      if (age < 0) {
        age = 0;
      }

      // 写回到年龄输入框  
      ageInput.value = age;
    });


    // 显示单位变更模态窗口  
    function showChangeTeamModal() {
      const selectedRows = document.querySelectorAll('.row-checkbox:checked');
      if (selectedRows.length === 0) {
        alert('请先选择需要变更单位的人员');
        return;
      }

      // 获取选中行的数据  
      const selectedIds = Array.from(selectedRows).map(checkbox => checkbox.getAttribute('data-id'));
      fetchSelectedFirefighters(selectedIds);
    }

    // 获取选中的消防员数据  
    function fetchSelectedFirefighters(ids) {
      Promise.all(ids.map(id =>
        fetch(`/firefighters/get/${id}`)
          .then(response => response.json())
      ))
        .then(firefighters => {
          displayChangeTeamTable(firefighters);
          document.getElementById('changeTeamModal').style.display = 'block';
          document.getElementById('modalBackdrop').style.display = 'block';
        })
        .catch(err => {
          console.error(err);
          alert('获取数据失败，请稍后重试');
        });
    }

    // 显示变更单位表格  
    function displayChangeTeamTable(firefighters) {
      const tbody = document.querySelector('#changeTeamTable tbody');
      tbody.innerHTML = '';

      firefighters.forEach(item => {
        const tr = document.createElement('tr');
        tr.setAttribute('data-id', item.objectId);

        // 创建单位选择下拉菜单  
        const teamSelect = `  
      <select class="form-select new-team">  
                <option value="">请选择单位</option>
                <option value="防火战线">防火战线</option>  
                <option value="灭火战线">灭火战线</option>  
                <option value="政治部战线">政治部战线</option>  
                <option value="后勤战线">后勤战线</option>  
                <option value="指挥中心和勤务站">指挥中心和勤务站</option>  
                <option value="战勤保障大队">战勤保障大队</option>  
                <option value="白塔区消防救援大队">白塔区消防救援大队</option>  
                <option value="铁西路消防救援站">铁西路消防救援站</option>  
                <option value="文圣区消防救援大队">文圣区消防救援大队</option>  
                <option value="安康路消防救援站">安康路消防救援站</option>  
                <option value="文昌街消防救援站">文昌街消防救援站</option>  
                <option value="太子河区消防救援大队">太子河区消防救援大队</option>  
                <option value="蔡四路特勤站">蔡四路特勤站</option>  
                <option value="辽阳县消防救援大队">辽阳县消防救援大队</option>  
                <option value="下达河消防救援站">下达河消防救援站</option>  
                <option value="刘二堡消防救援站">刘二堡消防救援站</option>  
                <option value="黄泥洼消防救援站">黄泥洼消防救援站</option>  
                <option value="灯塔市消防救援大队">灯塔市消防救援大队</option>  
                <option value="佟二堡消防救援站">佟二堡消防救援站</option>  
                <option value="铧子消防救援站">铧子消防救援站</option>  
                <option value="宏伟区消防救援大队">宏伟区消防救援大队</option>  
                <option value="万和一路消防救援站">万和一路消防救援站</option>  
                <option value="弓长岭区消防救援大队">弓长岭区消防救援大队</option>  
                <option value="汤泉谷消防救援站">汤泉谷消防救援站</option>  
                <option value="其它">其它</option>
      </select>  
    `;

        tr.innerHTML = `  
      <td>${item.number || ''}</td>  
      <td>${item.name || ''}</td>  
      <td>${item.gender || ''}</td>  
      <td>${item.age || ''}</td>  
      <td>${item.team || ''}</td>  
      <td>${teamSelect}</td>  
      <td><button class="remove-row button-secondary">删除</button></td>  
    `;

        tbody.appendChild(tr);
      });

      // 绑定删除行按钮事件  
      document.querySelectorAll('.remove-row').forEach(button => {
        button.addEventListener('click', function () {
          this.closest('tr').remove();
        });
      });
    }

    // 关闭模态窗口  
    document.getElementById('closeChangeTeamModal').addEventListener('click', function () {
      document.getElementById('changeTeamModal').style.display = 'none';
      document.getElementById('modalBackdrop').style.display = 'none';
    });

    document.getElementById('cancelChangeTeam').addEventListener('click', function () {
      document.getElementById('changeTeamModal').style.display = 'none';
      document.getElementById('modalBackdrop').style.display = 'none';
    });

    // 提交单位变更  
    document.getElementById('submitChangeTeam').addEventListener('click', function () {
      const rows = document.querySelectorAll('#changeTeamTable tbody tr');
      const changes = [];
      const updates = [];

      // 检查是否有数据  
      if (rows.length === 0) {
        alert('没有需要变更的数据');
        return;
      }

      // 收集变更数据  
      rows.forEach(row => {
        const id = row.getAttribute('data-id');
        const number = row.cells[0].textContent;
        const name = row.cells[1].textContent;
        const gender = row.cells[2].textContent;
        const age = row.cells[3].textContent;
        const oldTeam = row.cells[4].textContent;
        const newTeam = row.cells[5].querySelector('select').value;

        // 验证新单位是否已选择  
        if (!newTeam) {
          alert('请为所有人员选择变更单位');
          throw new Error('变更单位未选择');
        }

        // 创建变更记录  
        changes.push({
          number,
          name,
          gender,
          age,
          oldTeam,
          newTeam,
          changeDate: new Date().toISOString().split('T')[0]
        });

        // 创建更新记录  
        updates.push({
          id,
          team: newTeam
        });
      });

      // 提交变更  
      saveTeamChanges(changes, updates);
    });

    // 保存单位变更  
    function saveTeamChanges(changes, updates) {
      // 1. 更新Firefighter表中的单位  
      fetch('/firefighters/batch-update-team', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ updates })
      })
        .then(response => response.json())
        .then(result => {
          if (result.success) {
            // 2. 将变更记录保存到Change表  
            return fetch('/changes/add', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ changes })
            });
          } else {
            throw new Error('更新单位失败：' + result.error);
          }
        })
        .then(response => response.json())
        .then(result => {
          if (result.success) {
            alert('单位变更成功');
            document.getElementById('changeTeamModal').style.display = 'none';
            document.getElementById('modalBackdrop').style.display = 'none';
            loadFirefighters(); // 刷新表格  
          } else {
            alert('保存变更记录失败：' + result.error);
          }
        })
        .catch(err => {
          console.error(err);
          alert('操作失败：' + (err.message || '未知错误'));
        });
    }


    // 显示报表模态窗口  
    function showReportModal() {
      document.getElementById('reportModal').style.display = 'block';
      document.getElementById('modalBackdrop').style.display = 'block';

      // 设置默认日期为当前月份的第一天和最后一天  
      const now = new Date();
      const firstDay = new Date(now.getFullYear(), now.getMonth(), 1);
      const lastDay = new Date(now.getFullYear(), now.getMonth() + 1, 0);

      document.getElementById('startDate').valueAsDate = firstDay;
      document.getElementById('endDate').valueAsDate = lastDay;

    }


    // 打印当前实力  
    function printnow() {
  
      const printoutputFormatElement = document.querySelector('input[name="printoutputFormat"]:checked').value;

      // 基本参数 - 修改为正确的参数名  
      const params = {
        reportType: 'shilixinxi'  // 正确的参数名  
      };

      params.number = document.getElementById('searchNumber').value;      
      params.name = document.getElementById('searchName').value;
      params.gender = document.getElementById('searchGender').value;
      params.ageMin = document.getElementById('searchAgeMin').value;
      params.ageMax = document.getElementById('searchAgeMax').value;
      params.position = document.getElementById('searchPosition').value;
      params.team = document.getElementById('searchTeam').value;
      params.yearMinMax = document.getElementById('searchYear').value;

      // 添加排序参数  
      params.sortField = '';
      params.sortOrder = '';

      // 请求报表数据  
      fetch('/reports/generatenow?' + new URLSearchParams(params))
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            if (printoutputFormatElement === 'print') {
              displayPrintableReport(data.report, params.reportType);
            } else if (printoutputFormatElement === 'pdf') {
              downloadReportPDF(data.report, params.reportType);
            } else if (printoutputFormatElement === 'excel') {
              downloadReportExcel(data.report, params.reportType);
            }
          } else {
            alert('生成报表失败：' + data.error);
          }
        })
        .catch(err => {
          console.error('报表生成失败:', err);
          alert('报表生成失败，请稍后重试');
        });
    }


// 打印所有实力  
function printall() {
  
  const printoutputFormatElement = document.querySelector('input[name="printoutputFormat"]:checked').value;

  // 基本参数 - 修改为正确的参数名  
  const params = {
    reportType: 'shilixinxi'  // 正确的参数名  
  };

  // 添加排序参数  
  params.sortField = '';
  params.sortOrder = '';

  // 请求报表数据  
  fetch('/reports/generateall?' + new URLSearchParams(params))
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        if (printoutputFormatElement === 'print') {
          displayPrintableReport(data.report, params.reportType);
        } else if (printoutputFormatElement === 'pdf') {
          downloadReportPDF(data.report, params.reportType);
        } else if (printoutputFormatElement === 'excel') {
          downloadReportExcel(data.report, params.reportType);
        }
      } else {
        alert('生成报表失败：' + data.error);
      }
    })
    .catch(err => {
      console.error('报表生成失败:', err);
      alert('报表生成失败，请稍后重试');
    });
}

    // 关闭报表模态窗口  
    function closeReportModal() {
      document.getElementById('reportModal').style.display = 'none';
      document.getElementById('modalBackdrop').style.display = 'none';
    }

    // 根据选择的报表类型显示不同的筛选选项  
    function updateFilterOptions() {
      const reportTypeElement = document.getElementById('reportType').value;

      // 隐藏所有筛选组  
      document.querySelectorAll('.filter-group').forEach(elem => {
        elem.style.display = 'none';
      });

      // 显示对应报表类型的筛选组  
      switch (reportTypeElement) {
        case 'personnel':
          document.getElementById('personnelFilters').style.display = 'block';
          updateSortOptions(['number', 'name', 'ageNum', 'team', 'year']);
          break;
        case 'equipment':
          document.getElementById('equipmentFilters').style.display = 'block';
          updateSortOptions(['number', 'name', 'team']);
          break;
        case 'bodySize':
          document.getElementById('bodySizeFilters').style.display = 'block';
          updateSortOptions(['number', 'name', 'shengaoNum', 'xiongweiNum', 'yaoweiNum', 'touweiNum']);
          break;
        case 'teamSummary':
          // 队伍人员统计表不需要额外筛选  
          updateSortOptions(['team', 'total', 'male', 'female', 'avgAge']);
          break;
        case 'changeHistory':
          document.getElementById('changeHistoryFilters').style.display = 'block';
          updateSortOptions(['changeDate', 'number', 'name', 'oldTeam', 'newTeam']);
          break;
      }
    }

    // 更新排序字段选项  
    function updateSortOptions(fields) {
      const sortField = document.getElementById('sortField');

      // 清空现有选项  
      sortField.innerHTML = '<option value="">默认排序</option>';

      // 添加报表特定的排序字段  
      const fieldNames = {
        'number': '编号',
        'name': '姓名',
        'sex': '性别',
        'bornyear': '出生年月',        
        'ageNum': '年龄',
        'position': '职务',
        'team': '单位',
        'year': '工作年限',
        'maoleiNum': '帽类号',
        'fuzhuangNum': '服装号',
        'xieleiNum': '鞋类号',        
        'shengaoNum': '身高',
        'xiongweiNum': '胸围',
        'yaoweiNum': '腰围',
        'touweiNum': '头围',
        'keyongyue': '可用余额',
        'jingfeilaiyuan': '经费来源',
        'beizhu': '备注',
        'total': '总人数',
        'male': '男性人数',
        'female': '女性人数',
        'avgAge': '平均年龄',
        'changeDate': '变更日期',
        'oldTeam': '原单位',
        'newTeam': '变更单位'
      };

      fields.forEach(field => {
        const option = document.createElement('option');
        option.value = field;
        option.textContent = fieldNames[field] || field;
        sortField.appendChild(option);
      });
    }

    // 生成报表时收集所有筛选条件  
    function generateReport() {
      const reportTypeElement = document.getElementById('reportType').value;
      const teamFilterElement = document.getElementById('teamFilter').value;
      const outputFormatElement = document.querySelector('input[name="outputFormat"]:checked').value;

      // 基本参数 - 修改为正确的参数名  
      const params = {
        reportType: reportTypeElement,  // 正确的参数名  
        teamFilter: teamFilterElement   // 正确的参数名  
      };

      // 根据报表类型收集特定筛选条件  
      switch (reportTypeElement) {
        case 'personnel':
          params.gender = document.getElementById('genderFilter').value;
          params.ageMin = document.getElementById('ageMin').value;
          params.ageMax = document.getElementById('ageMax').value;
          params.position = document.getElementById('positionFilter').value;
          params.yearMin = document.getElementById('yearMinFilter').value;
          params.yearMax = document.getElementById('yearMaxFilter').value;
          break;
        case 'equipment':
          params.gender = document.getElementById('genderFilter').value;
          params.hatSize = document.getElementById('hatSizeFilter').value;
          params.clothingSize = document.getElementById('clothingSizeFilter').value;
          params.shoeSize = document.getElementById('shoeSizeFilter').value;
          break;
        case 'bodySize':
          params.gender = document.getElementById('genderFilter').value;
          params.heightMin = document.getElementById('heightMin').value;
          params.heightMax = document.getElementById('heightMax').value;
          params.chestMin = document.getElementById('chestMin').value;
          params.chestMax = document.getElementById('chestMax').value;
          params.waistMin = document.getElementById('waistMin').value;
          params.waistMax = document.getElementById('waistMax').value;
          params.headMin = document.getElementById('headMin').value;
          params.headMax = document.getElementById('headMax').value;
          break;
        case 'changeHistory':
          params.startDate = document.getElementById('startDate').value;
          params.endDate = document.getElementById('endDate').value;
          params.oldTeam = document.getElementById('oldTeamFilter').value;
          break;
      }

      // 添加排序参数  
      params.sortField = document.getElementById('sortField').value;
      params.sortOrder = document.getElementById('sortOrder').value;

      // 请求报表数据  
      fetch('/reports/generate?' + new URLSearchParams(params))
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            if (outputFormatElement === 'print') {
              displayPrintableReport(data.report, reportTypeElement);
            } else if (outputFormatElement === 'pdf') {
              downloadReportPDF(data.report, reportTypeElement);
            } else if (outputFormatElement === 'excel') {
              downloadReportExcel(data.report, reportTypeElement);
            }
          } else {
            alert('生成报表失败：' + data.error);
          }
        })
        .catch(err => {
          console.error('报表生成失败:', err);
          alert('报表生成失败，请稍后重试');
        });

      // 关闭模态窗口  
      closeReportModal();
    }

    // 显示可打印的报表  
    function displayPrintableReport(report, reportType) {
      // 创建打印容器  
      const printContainer = document.createElement('div');
      printContainer.className = 'print-container';
      printContainer.id = 'printableReport';

      // 添加报表头部  
      const header = document.createElement('div');
      header.className = 'print-header';
      header.innerHTML = `  
    <h11 style="font-size: 40px;">${getReportTitle(reportType)}</h11>  
  `;
      printContainer.appendChild(header);

      // 添加报表内容  
      const content = document.createElement('div');
      content.className = 'print-content';
      content.innerHTML = generateReportTable(report, reportType);
      printContainer.appendChild(content);

      // 添加打印信息（放在表格下方）  
      const printInfo = document.createElement('div');
      printInfo.className = 'print-info';

      // 从 EJS 变量中获取当前登录用户的用户名  
      const username = currentUser.username; // 假设已从后端传递到全局变量

      // 发起请求查询
      fetch(`/gerenxinxiguanli/fetch?number=${username}`)
        .then(res => res.json())
        .then(result => {
          if (result.success) {
            // 存在记录，自动填充表单  
            const data = result.data;
            if (currentUser && data.name) {
              printInfo.innerHTML = `  
    <div class="print-info-container" style="display: flex; gap: 30px;">  
      <div class="print-date">打印日期：${new Date().toLocaleDateString()}</div>  
      <div class="print-user">打印人：${data.name || '系统管理员'}</div>  
    </div>  
  `;
              printContainer.appendChild(printInfo);
              return;
            }
          }
        });

      // 添加报表底部（仅包含操作按钮）  
      const footer = document.createElement('div');
      footer.className = 'print-footer';
      footer.innerHTML = `  
    <div class="no-print action-buttons">  
      <button onclick="printReportIframe()" class="button">打印此页</button>  
      <button onclick="closeReport()" class="button button-secondary">关闭</button>  
    </div>  
  `;
      printContainer.appendChild(footer);

      // 添加必要的样式  
      const style = document.createElement('style');
      style.textContent = `  
  .action-buttons {  
    display: flex !important;  
    justify-content: flex-end !important;  
    gap: 10px;  
    width: 100%;  
  }  
  
  /* 重置可能影响对齐的样式 */  
  .print-footer {  
    width: 100%;  
    box-sizing: border-box;  
  }  
  
  .no-print {  
    width: 100%;  
  }  
`;
      document.head.appendChild(style);


      // 添加到文档中  
      document.body.appendChild(printContainer);
    }


// 使用iframe打印并强制插入页码
function printReportIframe() {
  // 获取要打印的内容  
  const printContent = document.getElementById('printableReport');
  
  // 获取标题
  const reportTitle = printContent.querySelector('.print-header h11')?.textContent || '报表';

  // 创建一个新的iframe  
  const iframe = document.createElement('iframe');
  iframe.style.display = 'none';
  document.body.appendChild(iframe);

  // 获取表格和其内容
  const table = printContent.querySelector('table');
  if (!table) {
    console.error('找不到表格元素');
    return;
  }

  const thead = table.querySelector('thead');
  const tbody = table.querySelector('tbody');
  
  if (!thead || !tbody) {
    console.error('表格结构不完整');
    return;
  }

  // 获取表头HTML
  const theadHTML = thead.outerHTML;
  
  // 获取所有行
  const rows = Array.from(tbody.querySelectorAll('tr'));
   
  // 获取标题和其他信息
  const headerHTML = printContent.querySelector('.print-header')?.outerHTML || '';
  const printInfoHTML = printContent.querySelector('.print-info')?.outerHTML || '';
  
 let rowsPerPage = 10;
  
  // 计算总页数
  const totalPages = Math.ceil(rows.length / rowsPerPage);
  
  // 创建分页后的内容
  let pagedContent = '';
 
  // 为每页创建内容
  for (let page = 0; page < totalPages; page++) {
    // 当前页的行范围
    const startRow = page * rowsPerPage;
    const endRow = Math.min((page + 1) * rowsPerPage, rows.length);
    
    // 提取当前页的行
    const pageRows = rows.slice(startRow, endRow);
    const pageRowsHTML = pageRows.map(row => row.outerHTML).join('');
    
    // 创建当前页的表格
    const pageTableHTML = `
      <table>
        ${theadHTML}
        <tbody>
          ${pageRowsHTML}
        </tbody>
      </table>
    `;
    
    // 创建当前页的完整内容
    pagedContent += `
      <div class="page">
        ${headerHTML}
        ${pageTableHTML}
        ${page === totalPages - 1 ? printInfoHTML : ''}
        <div class="page-number">第 ${page + 1} 页/共 ${totalPages} 页</div>
      </div>
    `;
  }
  
  // 获取iframe的文档  
  const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
  
  // 写入基本HTML结构，包括分页后的内容
  iframeDoc.write(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>${reportTitle}</title>
      <style>
        /* 重置样式 */
        body, html {
          margin: 0;
          padding: 0;
          font-family: Arial, sans-serif;
        }
        
        /* 页面样式 */
        .page {  
          position: relative;  
          padding: 10mm;  
          box-sizing: border-box;  
        }  
        @media print {  
          @page { margin: 0; }  
          .page { page-break-after: always; }  
          .page:last-child { page-break-after: avoid; }
          
          html {
            zoom: 0.8; /* 整体缩放到80% */
          }
          
        }  
        
        /* 报表样式 */
        .print-header {
          text-align: center;
          margin-bottom: 5mm;
        }
        
        /* 打印信息样式 */
        .print-info {
          padding: 0;
          margin-top: 5mm;
        }
        
        .print-info-container {
          display: flex;
          justify-content: space-between;
          border-top: 1px solid #ddd;
          padding-top: 5mm;
        }
        
        .print-date, .print-user {
          font-size: 10pt;
        }
        
        /* 表格样式 */
        table {
          width: 100%;
          border-collapse: collapse;
          margin-bottom: 10mm;
        }
        
        th, td {
          border: 1px solid #333;
          padding: 3mm;
          text-align: center;
        }
        
        th {
          background-color: #f2f2f2;
        }
        
        /* 页码样式 */
        .page-number {
          position: absolute;
          bottom: 5mm;
          left: 0;
          width: 100%;
          text-align: center;
          font-size: 10pt;
        }
        
      </style>
    </head>
    <body>
      ${pagedContent}
    </body>
    </html>
  `);
  
  iframeDoc.close();
  
  // 等待内容加载完成  
  setTimeout(() => {
    // 打印iframe内容  
    iframe.contentWindow.focus();
    iframe.contentWindow.print();
    
    // 打印后删除iframe  
    setTimeout(() => {
      document.body.removeChild(iframe);
    }, 1000);
  }, 1000);
}


    // 关闭报表  
    function closeReport() {
      const container = document.getElementById('printableReport');
      if (container) {
        document.body.removeChild(container);
      }
    }

    // 获取报表标题  
    function getReportTitle(reportType) {
      const titles = {
        'personnel': '人员基本信息表',
        'equipment': '人员装备配发表',
        'bodySize': '人员体型尺寸表',
        'teamSummary': '队伍人员统计表',
        'changeHistory': '单位变更记录表',
        'shilixinxi': '实力信息统计表'

      };
      return titles[reportType] || '报表';
    }

    // 生成报表表格HTML  
    function generateReportTable(report, reportType) {
      let tableHTML = '<table class="print-table">';

      // 根据报表类型生成不同的表头  
      if (reportType === 'personnel') {
        tableHTML += `  
      <thead>  
        <tr>  
          <th>编号</th>  
          <th>姓名</th>  
          <th>性别</th>  
          <th>年龄</th>  
          <th>职务</th>  
          <th>单位</th>  
          <th>工作年限</th>  
          <th>可用余额</th>
          <th>经费来源</th>            
          <th>备注</th>  
        </tr>  
      </thead>  
      <tbody>  
    `;

        report.forEach(item => {
          tableHTML += `  
        <tr>  
          <td>${item.number || ''}</td>  
          <td>${item.name || ''}</td>  
          <td>${item.gender || ''}</td>  
          <td>${item.age || ''}</td>  
          <td>${item.position || ''}</td>  
          <td>${item.team || ''}</td>  
          <td>${item.year || ''}</td>  
          <td>${item.keyongyue || ''}</td>
          <td>${item.jingfeilaiyuan || ''}</td>            
          <td>${item.remarks || ''}</td>  
        </tr>  
      `;
        });

      } else if (reportType === 'equipment') {
        tableHTML += `  
      <thead>  
        <tr>  
          <th>编号</th>  
          <th>姓名</th>  
          <th>性别</th>  
          <th>单位</th>  
          <th>帽类号</th>  
          <th>服装号</th>  
          <th>鞋类号</th>  
        </tr>  
      </thead>  
      <tbody>  
    `;

        report.forEach(item => {
          tableHTML += `  
        <tr>  
          <td>${item.number || ''}</td>  
          <td>${item.name || ''}</td>  
          <td>${item.gender || ''}</td>  
          <td>${item.team || ''}</td>  
          <td>${item.maoleihao || ''}</td>  
          <td>${item.fuzhuanghao || ''}</td>  
          <td>${item.xieleihao || ''}</td>  
        </tr>  
      `;
        });

      } else if (reportType === 'bodySize') {
        tableHTML += `  
      <thead>  
        <tr>  
          <th>编号</th>  
          <th>姓名</th>  
          <th>性别</th>  
          <th>单位</th>  
          <th>身高(CM)</th>  
          <th>胸围(CM)</th>  
          <th>腰围(CM)</th>  
          <th>头围(CM)</th>  
        </tr>  
      </thead>  
      <tbody>  
    `;

        report.forEach(item => {
          tableHTML += `  
        <tr>  
          <td>${item.number || ''}</td>  
          <td>${item.name || ''}</td>  
          <td>${item.gender || ''}</td>  
          <td>${item.team || ''}</td>  
          <td>${item.shengao || ''}</td>  
          <td>${item.xiongwei || ''}</td>  
          <td>${item.yaowei || ''}</td>  
          <td>${item.touwei || ''}</td>  
        </tr>  
      `;
        });

      } else if (reportType === 'teamSummary') {
        tableHTML += `  
      <thead>  
        <tr>  
          <th>单位</th>  
          <th>总人数</th>  
          <th>男性</th>  
          <th>女性</th>  
          <th>平均年龄</th>  
        </tr>  
      </thead>  
      <tbody>  
    `;

        report.forEach(item => {
          tableHTML += `  
        <tr>  
          <td>${item.team || ''}</td>  
          <td>${item.total || 0}</td>  
          <td>${item.male || 0}</td>  
          <td>${item.female || 0}</td>  
          <td>${item.avgAge || 0}</td>  
        </tr>  
      `;
        });

      } else if (reportType === 'changeHistory') {
        tableHTML += `  
      <thead>  
        <tr>  
          <th>编号</th>  
          <th>姓名</th>  
          <th>性别</th>  
          <th>年龄</th>  
          <th>原单位</th>  
          <th>变更单位</th>  
          <th>变更日期</th>  
        </tr>  
      </thead>  
      <tbody>  
    `;

        report.forEach(item => {
          tableHTML += `  
        <tr>  
          <td>${item.number || ''}</td>  
          <td>${item.name || ''}</td>  
          <td>${item.gender || ''}</td>  
          <td>${item.age || ''}</td>  
          <td>${item.oldTeam || ''}</td>  
          <td>${item.newTeam || ''}</td>  
          <td>${item.changeDate || ''}</td>  
        </tr>  
      `;
        });
      } else if (reportType === 'shilixinxi') {
        tableHTML += `  
      <thead>  
        <tr>  
          <th>编号</th>  
          <th>姓名</th>  
          <th>性别</th>
          <th>出生年月</th>  
          <th>年龄</th>
          <th>职务</th>            
          <th>单位</th>  
          <th>工作年限</th>  
          <th>帽类号</th>
          <th>服装号</th>
          <th>鞋类号</th>
          <th>身高</th>
          <th>胸围</th>          
          <th>腰围</th>          
          <th>头围</th>
          <th>可用余额</th>
          <th>经费来源</th>
          <th>备注</th>          
        </tr>  
      </thead>  
      <tbody>  
    `;

        report.forEach(item => {
          tableHTML += `  
        <tr>  
          <td>${item.number || ''}</td>  
          <td>${item.name || ''}</td>  
          <td>${item.gender || ''}</td>
          <td>${item.birthDate || ''}</td>        
          <td>${item.age || ''}</td>  
          <td>${item.position || ''}</td>  
          <td>${item.team || ''}</td>  
          <td>${item.year || ''}</td>
          <td>${item.maoleihao || ''}</td>  
          <td>${item.fuzhuanghao || ''}</td>  
          <td>${item.xieleihao || ''}</td>
          <td>${item.shengao || ''}</td>        
          <td>${item.xiongwei || ''}</td>  
          <td>${item.yaowei || ''}</td>  
          <td>${item.touwei || ''}</td>  
          <td>${item.keyongyue || ''}</td>
          <td>${item.jingfeilaiyuan || ''}</td>  
          <td>${item.remarks || ''}</td>                         
        </tr>  
      `;
        });
      }

      tableHTML += '</tbody></table>';
      return tableHTML;
    }


    // 下载PDF报表  
    async function downloadReportPDF(report, reportType) {
      // 创建PDF文档  
      const { jsPDF } = window.jspdf;
      const doc = new jsPDF({
    orientation: 'landscape', // 设置为横向
    unit: 'mm',
    format: 'a4'
  });

     // 设置表格线宽度为 0.5mm（默认通常是 0.1mm 左右）
     doc.setLineWidth(0.5);

      // 加载字体  
      const fontPath = '/fonts/Simsun.ttf'; // 确保字体文件路径正确  
      const fontRes = await fetch(fontPath);
      if (!fontRes.ok) throw new Error('字体文件未找到');

      const fontBlob = await fontRes.arrayBuffer();

      // 使用适当的方法转换为 Base64 字符串  
      const fontBase64 = arrayBufferToBase64(fontBlob); // 转换为 Base64 

      // 添加字体到 jsPDF  
      doc.addFileToVFS('Simsun.ttf', fontBase64);
      doc.addFont('Simsun.ttf', 'Simsun', 'normal');
      doc.setFont('Simsun');


      // 设置标题  
      const title = getReportTitle(reportType);
      doc.setFontSize(25);
      doc.text(title, 140, 15, { align: 'center' });

      // 设置表格列  
      let columns = [];
      let rows = [];

      // 根据不同报表类型设置列  
      if (reportType === 'personnel') {
        columns = [
          { header: '编号', dataKey: 'number' },
          { header: '姓名', dataKey: 'name' },
          { header: '性别', dataKey: 'gender' },
          { header: '年龄', dataKey: 'age' },
          { header: '职务', dataKey: 'position' },
          { header: '单位', dataKey: 'team' },
          { header: '工作年限', dataKey: 'year' },
          { header: '可用余额', dataKey: 'keyongyue' },
          { header: '经费来源', dataKey: 'jingfeilaiyuan' }
        ];
      } else if (reportType === 'equipment') {
        columns = [
          { header: '编号', dataKey: 'number' },
          { header: '姓名', dataKey: 'name' },
          { header: '性别', dataKey: 'gender' },
          { header: '单位', dataKey: 'team' },
          { header: '帽类号', dataKey: 'maoleihao' },
          { header: '服装号', dataKey: 'fuzhuanghao' },
          { header: '鞋类号', dataKey: 'xieleihao' }
        ];
      } else if (reportType === 'bodySize') {
        columns = [
          { header: '编号', dataKey: 'number' },
          { header: '姓名', dataKey: 'name' },
          { header: '性别', dataKey: 'gender' },
          { header: '单位', dataKey: 'team' },
          { header: '身高(CM)', dataKey: 'shengao' },
          { header: '胸围(CM)', dataKey: 'xiongwei' },
          { header: '腰围(CM)', dataKey: 'yaowei' },
          { header: '头围(CM)', dataKey: 'touwei' }
        ];
      } else if (reportType === 'teamSummary') {
        columns = [
          { header: '单位', dataKey: 'team' },
          { header: '总人数', dataKey: 'total' },
          { header: '男性', dataKey: 'male' },
          { header: '女性', dataKey: 'female' },
          { header: '平均年龄', dataKey: 'avgAge' }
        ];
      } else if (reportType === 'changeHistory') {
        columns = [
          { header: '编号', dataKey: 'number' },
          { header: '姓名', dataKey: 'name' },
          { header: '性别', dataKey: 'gender' },
          { header: '年龄', dataKey: 'age' },
          { header: '原单位', dataKey: 'oldTeam' },
          { header: '变更单位', dataKey: 'newTeam' },
          { header: '变更日期', dataKey: 'changeDate' }
        ];
      } else if (reportType === 'shilixinxi') {
        columns = [
          { header: '编号', dataKey: 'number' },
          { header: '姓名', dataKey: 'name' },
          { header: '性别', dataKey: 'gender' },
          { header: '出生年月', dataKey: 'birthDate' },          
          { header: '年龄', dataKey: 'age' },
          { header: '职务', dataKey: 'position' },          
          { header: '单位', dataKey: 'team' },
          { header: '工作年限', dataKey: 'year' },
          { header: '帽类号', dataKey: 'maoleihao' },
          { header: '服装号', dataKey: 'fuzhuanghao' },
          { header: '鞋类号', dataKey: 'xieleihao' },
          { header: '身高', dataKey: 'shengao' },
          { header: '胸围', dataKey: 'xiongwei' },
          { header: '腰围', dataKey: 'yaowei' },
          { header: '头围', dataKey: 'touwei' },
          { header: '可用余额', dataKey: 'keyongyue' },
          { header: '经费来源', dataKey: 'jingfeilaiyuan' },
          { header: '备注', dataKey: 'remarks' }
        ];
      }

      // 将报表数据转换为行数据  
      rows = report.map(item => {
        const row = {};
        columns.forEach(col => {
          // 使用nullish合并运算符 (??)，只会在值为null或undefined时使用后面的值  
          row[col.dataKey] = item[col.dataKey] ?? '';
        });
        return row;
      });

      // 保存上次表格结束的位置  
      let lastY = 0;

      // 生成PDF表格  
      doc.autoTable({
        startY: 20,
        head: [columns.map(col => col.header)],
        body: rows.map(row => columns.map(col => row[col.dataKey])),
        theme: 'grid',
        headStyles: {
          fillColor: [41, 128, 185],
          textColor: 255,
          fontSize: 8,
          halign: 'center'
        },
        margin: { top: 30 },
        styles: {
          font: "Simsun",
          fontSize: 8,
          cellPadding: 3,
          valign: 'middle',
          halign: 'center'
        },
        columnStyles: { text: { cellWidth: 'auto' } },
        didDrawPage: (data) => {
          // 保存表格结束位置  
          lastY = data.cursor.y;
        }
      });

      // 添加页脚  
      const pageCount = doc.internal.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        // 确保设置字体后再添加日期文本  
        doc.setFont('Simsun');
        doc.setPage(i);
        doc.setFontSize(10);
        doc.text(`第${i}页/共${pageCount}页`, 160, doc.internal.pageSize.height - 10, { align: 'center' });

        // 只在最后一页的表格下方添加日期和打印人信息  
        if (i === pageCount) {
          // 确保设置字体  
          doc.setFont('Simsun');
          doc.setFontSize(10);

          // 在表格下方添加日期和打印人信息  
          const footerY = lastY + 15; // 表格结束位置下方15mm  

          // 左侧添加打印日期  
          doc.text(`打印日期:${new Date().toLocaleDateString()}`, 15, footerY);


          // 从 EJS 变量中获取当前登录用户的用户名  
          const username = currentUser.username; // 假设已从后端传递到全局变量

          // 调用生成函数并在完成后输出PDF  
          generatePDF(doc, username, footerY).then(finalDoc => {
            // 下载PDF  
            finalDoc.save(`${title}-${new Date().toISOString().split('T')[0]}.pdf`);
          }).catch(error => {
            console.error('PDF生成过程中出错:', error);
          });
        }

      }
    }


    function generatePDF(doc, username, footerY) {
      return new Promise((resolve, reject) => {
        // 左侧添加打印日期  
        doc.text(`打印日期:${new Date().toLocaleDateString()}`, 15, footerY);

        fetch(`/gerenxinxiguanli/fetch?number=${username}`)
          .then(res => res.json())
          .then(result => {
            if (result.success && result.data && result.data.name) {
              // 右侧添加打印人  
              doc.text(`打印人:${result.data.name}`, 50, footerY);
            } else {
              // 如果没有获取到名字，使用默认名称  
              doc.text(`打印人:系统管理员`, 50, footerY);
            }
            resolve(doc); // 返回修改后的doc对象  
          })
          .catch(err => {
            console.error('获取用户信息失败:', err);
            // 出错时也添加默认打印人  
            doc.text(`打印人:系统管理员`, 50, footerY);
            resolve(doc); // 尽管有错误，仍然返回doc对象  
          });
      });
    }


    // 提供转换 ArrayBuffer 为 Base64 字符串的方法  
    function arrayBufferToBase64(buffer) {
      let binary = '';
      const bytes = new Uint8Array(buffer);
      const len = bytes.byteLength;
      for (let i = 0; i < len; i++) {
        binary += String.fromCharCode(bytes[i]);
      }
      return window.btoa(binary); // 使用 window.btoa 将字符串转为 Base64  
    }


    // 下载Excel报表  
    function downloadReportExcel(report, reportType) {
      // 设置表格标题行  
      let headers = [];
      const title = getReportTitle(reportType);

      // 根据不同报表类型设置列  
      if (reportType === 'personnel') {
        headers = ['编号', '姓名', '性别', '年龄', '职务', '单位', '工作年限', '可用余额', '经费来源', '备注'];
      } else if (reportType === 'equipment') {
        headers = ['编号', '姓名', '性别', '单位', '帽类号', '服装号', '鞋类号'];
      } else if (reportType === 'bodySize') {
        headers = ['编号', '姓名', '性别', '单位', '身高(CM)', '胸围(CM)', '腰围(CM)', '头围(CM)'];
      } else if (reportType === 'teamSummary') {
        headers = ['单位', '总人数', '男性', '女性', '平均年龄'];
      } else if (reportType === 'changeHistory') {
        headers = ['编号', '姓名', '性别', '年龄', '原单位', '变更单位', '变更日期'];
      } else if (reportType === 'shilixinxi') {
        headers = ['编号', '姓名', '性别', '出生年月', '年龄', '职务', '单位', '工作年限', '帽类号', '服装号', '鞋类号', '身高', '胸围', '腰围', '头围', '可用余额', '经费来源', '备注'];
      }


      // 准备数据行，添加标题行  
      const rows = [];

      // 添加标题行（第一行，后面会合并单元格）  
      rows.push([title]);

      // 第二行添加表头  
      rows.push(headers);

      // 根据不同报表类型生成数据行  
      if (reportType === 'personnel') {
        report.forEach(item => {
          rows.push([
            item.number || '',
            item.name || '',
            item.gender || '',
            item.age || '',
            item.position || '',
            item.team || '',
            item.year || '',
            item.keyongyue || '',
            item.jingfeilaiyuan || '',
            item.remarks || ''
          ]);
        });
      } else if (reportType === 'equipment') {
        report.forEach(item => {
          rows.push([
            item.number || '',
            item.name || '',
            item.gender || '',
            item.team || '',
            item.maoleihao || '',
            item.fuzhuanghao || '',
            item.xieleihao || ''
          ]);
        });
      } else if (reportType === 'bodySize') {
        report.forEach(item => {
          rows.push([
            item.number || '',
            item.name || '',
            item.gender || '',
            item.team || '',
            item.shengao || '',
            item.xiongwei || '',
            item.yaowei || '',
            item.touwei || ''
          ]);
        });
      } else if (reportType === 'teamSummary') {
        report.forEach(item => {
          rows.push([
            item.team || '',
            item.total || 0,
            item.male || 0,
            item.female || 0,
            item.avgAge || 0
          ]);
        });
      } else if (reportType === 'changeHistory') {
        report.forEach(item => {
          rows.push([
            item.number || '',
            item.name || '',
            item.gender || '',
            item.age || '',
            item.oldTeam || '',
            item.newTeam || '',
            item.changeDate || ''
          ]);
        });
      } else if (reportType === 'shilixinxi') {
        report.forEach(item => {
          rows.push([
          item.number || '',  
          item.name || '', 
          item.gender || '',
          item.birthDate || '',        
          item.age || '',  
          item.position || '',  
          item.team || '',  
          item.year || '',
          item.maoleihao || '',  
          item.fuzhuanghao || '',  
          item.xieleihao || '',
          item.shengao || '',        
          item.xiongwei || '',  
          item.yaowei || '',  
          item.touwei || '',  
          item.keyongyue || '',
          item.jingfeilaiyuan || '',  
          item.remarks || '' 
          ]);
        });
      }

      // 添加空行  
      rows.push([]);

      // 为最后一行的每个单元格填充空值以保证所有列都存在  
      const printInfoRow = [];
      for (let i = 0; i < headers.length; i++) {
        printInfoRow.push('');
      }

      // 设置打印日期和打印人信息  
      printInfoRow[0] = `打印日期:${new Date().toLocaleDateString()}`;
      rows.push(printInfoRow);

      // 获取打印人信息 - 使用Promise  
      const username = currentUser.username; // 假设已从后端传递到全局变量  

      // 使用fetch获取用户信息，并在回调中处理生成Excel  
      fetch(`/gerenxinxiguanli/fetch?number=${username}`)
        .then(response => response.json())
        .then(result => {
          // 设置打印人信息 - 使用中间位置作为起始点  
          const halfLength = Math.floor(headers.length / 2);
          if (result.success && result.data && result.data.name) {
            rows[rows.length - 1][halfLength] = `打印人:${result.data.name}`;
          } else {
            rows[rows.length - 1][halfLength] = `打印人:系统管理员`;
          }

          // 生成Excel文件(在确保获取到打印人信息后)  
          generateAndDownloadExcel(rows, headers, title);
        })
        .catch(error => {
          console.error('获取用户信息失败:', error);
          // 发生错误时设置默认打印人  
          const halfLength = Math.floor(headers.length / 2);
          rows[rows.length - 1][halfLength] = `打印人:系统管理员`;
          // 错误时也能生成Excel  
          generateAndDownloadExcel(rows, headers, title);
        });


      // 将Excel生成和下载逻辑移到单独的函数  
      function generateAndDownloadExcel(rows, headers, title) {

        // 创建工作表  
        const ws = XLSX.utils.aoa_to_sheet(rows);
        // 设置合并单元格 - 将标题行合并  
        // 合并区域格式为 {s: {c: 起始列, r: 起始行}, e: {c: 结束列, r: 结束行}}  
        const merge = {
          s: { c: 0, r: 0 }, // 起始位置：第1行，第1列  
          e: { c: headers.length - 1, r: 0 } // 结束位置：第1行，最后一列  
        };

        // 如果没有合并单元格数组，则创建一个  
        if (!ws['!merges']) ws['!merges'] = [];

        // 添加合并区域  
        ws['!merges'].push(merge);

        // 确定打印信息行的行号  
        const printInfoRow = rows.length - 1;

        // 计算中间位置  
        const halfLength = Math.floor(headers.length / 2);

        // 设置打印日期的合并单元格（左半部分）  
        const dateMerge = {
          s: { c: 0, r: printInfoRow }, // 起始位置：最后一行，第1列  
          e: { c: halfLength - 1, r: printInfoRow } // 结束位置：最后一行，中间位置-1  
        };
        ws['!merges'].push(dateMerge);

        // 设置打印人的合并单元格（右半部分）  
        const userMerge = {
          s: { c: halfLength, r: printInfoRow }, // 起始位置：最后一行，中间位置  
          e: { c: headers.length - 1, r: printInfoRow } // 结束位置：最后一行，最后一列  
        };
        ws['!merges'].push(userMerge);

        // === 根据每列内容自动调整列宽 ===  
        // 初始化列宽数组，每列至少有一个最小宽度  
        const colWidths = Array(headers.length).fill().map(() => ({ wch: 8 }));

        // 首先考虑表头的宽度  
        headers.forEach((header, idx) => {
          const headerWidth = getStringWidth(header);
          colWidths[idx].wch = headerWidth;
        });

        // 遍历每一行数据，找出每列中最宽的内容  
        for (let r = 2; r < rows.length - 1; r++) {  // 从数据行开始，跳过标题和表头  
          for (let c = 0; c < headers.length; c++) {
            if (rows[r][c] !== undefined && rows[r][c] !== null) {
              // 获取内容宽度  
              const cellWidth = getStringWidth(rows[r][c].toString());
              // 更新列宽，只有当内容宽度大于当前列宽时才更新  
              if (cellWidth > colWidths[c].wch) {
                colWidths[c].wch = cellWidth;
              }
            }
          }
        }

        // 检查打印信息行的宽度需求  
        const printDateText = rows[printInfoRow][0] || '';
        const printUserText = rows[printInfoRow][halfLength] || '';

        // 左半边（打印日期）需要的总宽度  
        const dateInfoWidth = getStringWidth(printDateText);
        // 右半边（打印人）需要的总宽度  
        const userInfoWidth = getStringWidth(printUserText);

        // 计算当前左半边列的总宽度  
        let leftTotalWidth = 0;
        for (let i = 0; i < halfLength; i++) {
          leftTotalWidth += colWidths[i].wch;
        }

        // 计算当前右半边列的总宽度  
        let rightTotalWidth = 0;
        for (let i = halfLength; i < headers.length; i++) {
          rightTotalWidth += colWidths[i].wch;
        }

        // 如果打印日期需要更多空间，适当调整左半部分的列宽  
        if (dateInfoWidth > leftTotalWidth && halfLength > 0) {
          const extraWidthPerCol = Math.ceil((dateInfoWidth - leftTotalWidth) / halfLength);
          for (let i = 0; i < halfLength; i++) {
            colWidths[i].wch += extraWidthPerCol;
          }
        }

        // 如果打印人需要更多空间，适当调整右半部分的列宽  
        if (userInfoWidth > rightTotalWidth && (headers.length - halfLength > 0)) {
          const extraWidthPerCol = Math.ceil((userInfoWidth - rightTotalWidth) / (headers.length - halfLength));
          for (let i = halfLength; i < headers.length; i++) {
            colWidths[i].wch += extraWidthPerCol;
          }
        }

        // 为所有列增加一些边距  
        colWidths.forEach((col) => {
          col.wch += 4; // 增加4个字符的边距（左右各2个）  
        });

        // 设置最终的列宽  
        ws['!cols'] = colWidths;

        // 设置标题单元格样式  
        // 详细的样式定义  
        const styles = {
          title: {
            font: {
              name: '宋体',
              sz: 16,
              color: { rgb: "FFFFFF" },
              bold: true
            },
            fill: {
              fgColor: { rgb: "0070C0" }
            },
            alignment: {
              horizontal: "center",
              vertical: "center"
            }
            // 移除了边框样式  
          },
          header: {
            font: {
              name: '宋体',
              sz: 12,
              bold: true
            },
            fill: {
              fgColor: { rgb: "DDDDDD" }
            },
            alignment: {
              horizontal: "center",
              vertical: "center"
            },
            border: {
              top: { style: "thin", color: { rgb: "000000" } },
              bottom: { style: "thin", color: { rgb: "000000" } },
              left: { style: "thin", color: { rgb: "000000" } },
              right: { style: "thin", color: { rgb: "000000" } }
            }
          },
          cell: {
            alignment: {
              horizontal: "center",
              vertical: "center"
            },
            border: {
              top: { style: "thin", color: { rgb: "000000" } },
              bottom: { style: "thin", color: { rgb: "000000" } },
              left: { style: "thin", color: { rgb: "000000" } },
              right: { style: "thin", color: { rgb: "000000" } }
            }
          },
          footerInfo: {
            font: {
              name: '宋体',
              sz: 10,
              bold: true
            },
            alignment: {
              horizontal: "left",
              vertical: "center"
            }
          }
        };

        // 应用样式到单元格  
        ws['A1'].s = styles.title;
        // 为表头行（第2行）的每一列设置样式  
        for (let i = 0; i < headers.length; i++) {
          // 将列索引转换为Excel列标识 (A2, B2, C2...)  
          const cellRef = XLSX.utils.encode_cell({ c: i, r: 1 }); // r=1 是第二行
          // 确保单元格存在  
          if (!ws[cellRef]) ws[cellRef] = {};
          if (!ws[cellRef].s) ws[cellRef].s = {};
          ws[cellRef].s = styles.header;
        }

        // 为数据行应用样式  
        for (let row = 3; row < rows.length + 2; row++) {
          for (let col = 0; col < headers.length; col++) {
            const cellAddress = XLSX.utils.encode_cell({ r: row - 1, c: col });
            if (ws[cellAddress]) {
              ws[cellAddress].s = styles.cell;
            }
          }
        }

        // 为打印信息行的所有单元格应用无边框样式  
        for (let col = 0; col < headers.length; col++) {
          const cellAddress = XLSX.utils.encode_cell({ r: printInfoRow, c: col });
          if (!ws[cellAddress]) ws[cellAddress] = { v: "" };
          ws[cellAddress].s = styles.footerInfo;
        }


        // 创建工作簿  
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, title);

        // 生成Excel文件并下载  
        const fileName = `${title}-${new Date().toISOString().split('T')[0]}.xlsx`;
        XLSX.writeFile(wb, fileName);
      }
    }


    // === 添加一个辅助函数来计算字符串宽度 ===  
    function getStringWidth(str) {
      if (!str) return 0;
      let width = 0;
      for (let i = 0; i < str.length; i++) {
        // 中文字符和全角符号占用更多宽度  
        if (str.charCodeAt(i) > 127) {
          width += 2.2;  // 中文字符宽度系数  
        } else {
          width += 1.1;  // 英文字符宽度系数  
        }
      }
      // 添加一些内边距  
      return Math.ceil(width) + 2;
    }

  </script>
</body>

</html>