<!DOCTYPE html>
<html lang="zh-CN">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>登录-被装管理系统</title>
<!-- Bootstrap CSS -->  
<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">  

<!-- Bootstrap Icons -->  
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.0/font/bootstrap-icons.min.css">  

<!-- Bootstrap JS -->  
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>

<style>
/* 现代化背景渐变 */
/* 背景图片样式 */  
body {
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;  
  margin: 0;  
  padding: 0;  
  min-height: 100vh; /* 占满整个视口高度 */  
  display: flex;  
  flex-direction: column;  
  justify-content: center;  
  align-items: center;
  position: relative;  
} 

body::before {  
  content: "";  
  position: fixed;  
  top: 0; left: 0; right: 0; bottom: 0;  
  z-index: -1;  
  background-image: url('/images/loginbg-new.jpg');  
  background-size: cover;  
  background-position: top center;  
  background-repeat: no-repeat;  
  width: 100vw;  
  height: 100vh;  
  opacity: 1; /* 需要时可调透明度 */  
} 

@keyframes float {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    50% { transform: translateY(-20px) rotate(180deg); }
}

/* 主容器样式 */
.main-container { 
    position: fixed; 
    max-width: 500px;
    max-height: 500px;  
    margin-right: 40px;   /* 左边距可大些，防止太靠边 */  
    margin-top: auto;    /* 可以加个顶部间距，更美观 */ 
    margin-bottom: auto;    /* 可以加个顶部间距，更美观 */     
    margin-left: auto; 
    top: 60%;                    /* 垂直居中，可调整 */  
    right: 40px;                 /* 距离右边80px，可调整 */  
    transform: translateY(-50%); /* 垂直居中辅助 */  
    z-index: 1000;              /* 确保在其他内容之上 */  
    border-radius: 8px;  
    padding: 20px;  
}

.logo-container {  
    text-align: center;  
    margin-bottom: 1.5rem;  
}  

.logo-container img {  
    max-height: 200px; /* 可根据需要调整 */  
    width: auto;  
    height: auto;  
    border-radius: 8px;  
}  

/* 响应式调整 */  
@media (max-width: 768px) {  
    .logo-container img {  
        max-height: 150px; /* 移动端稍小一些 */  
    }  
}

.logo-container img:hover {
    transform: scale(1.05);
}

/* 登录卡片现代化设计 */
.login-card {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-radius: 20px;
    box-shadow: 0 20px 40px rgba(0,0,0,0.1);
    border: 1px solid rgba(255,255,255,0.2);
    overflow: hidden;
    animation: slideUp 0.8s ease-out;
}

.card-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    text-align: center;
    padding: 2rem;
    margin: 0 !important;  /* 重置 margin */ 
}

.card-header h1 {
    margin: 0;
    padding: 0;
    font-size: 1.8rem;
    font-weight: 600;
    text-shadow: 0 2px 4px rgba(0,0,0,0.3);
    /* 添加 flexbox 居中 */  
    display: flex;  
    align-items: center;      /* 垂直居中 */  
    justify-content: center;  /* 水平居中 */     
}

/* 输入组现代化 */
.input-group-modern {
    position: relative;
    margin-bottom: 1.5rem;
}

.form-control-modern {
    border: 2px solid #e1e5e9;
    border-radius: 12px;
    padding: 15px 20px 15px 50px;
    font-size: 1rem;
    transition: all 0.3s ease;
    background: rgba(255,255,255,0.9);
}

.form-control-modern:focus {
    border-color: #667eea;
    box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    background: white;
    transform: translateY(-2px);
}

.input-icon {
    position: absolute;
    left: 18px;
    top: 50%;
    transform: translateY(-50%);
    color: #6c757d;
    font-size: 1.1rem;
    z-index: 3;
    transition: color 0.3s ease;
}

.form-control-modern:focus + .input-icon {
    color: #667eea;
}

/* 现代化按钮 */
.btn-modern {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border: none;
    border-radius: 12px;
    padding: 15px;
    font-size: 1.1rem;
    font-weight: 600;
    color: white;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
}

.btn-modern::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
    transition: left 0.5s;
}

.btn-modern:hover::before {
    left: 100%;
}

.btn-modern:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 25px rgba(102, 126, 234, 0.4);
}

.btn-modern:active {
    transform: translateY(-1px);
}

/* 错误消息现代化 */
.alert-modern {
    border-radius: 12px;
    border: none;
    background: linear-gradient(135deg, #ff6b6b, #ee5a52);
    color: white;
    padding: 1rem 1.5rem;
    margin-bottom: 1.5rem;
    animation: shake 0.5s ease-in-out;
}

@keyframes shake {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
}

/* 链接现代化 */
.modern-link {
    color: #667eea;
    text-decoration: none;
    font-weight: 500;
    transition: all 0.3s ease;
    position: relative;
}

.modern-link::after {
    content: '';
    position: absolute;
    width: 0;
    height: 2px;
    bottom: -2px;
    left: 0;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    transition: width 0.3s ease;
}

.modern-link:hover::after {
    width: 100%;
}

.modern-link:hover {
    color: #764ba2;
    text-decoration: none;
}

/* 模态框现代化 */
.modal-modern {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.6);
    backdrop-filter: blur(5px);
    z-index: 1000;
    animation: fadeIn 0.3s ease;
}

.modal-content-modern {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: white;
    border-radius: 20px;
    padding: 2rem;
    max-width: 500px;
    width: 90%;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 25px 50px rgba(0,0,0,0.2);
    animation: modalSlideIn 0.3s ease;
}

@keyframes modalSlideIn {
    from {
        opacity: 0;
        transform: translate(-50%, -60%);
    }
    to {
        opacity: 1;
        transform: translate(-50%, -50%);
    }
}

.close-modal-modern {
    position: absolute;
    top: 15px;
    right: 20px;
    background: none;
    border: none;
    font-size: 1.5rem;
    color: #6c757d;
    cursor: pointer;
    transition: all 0.3s ease;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.close-modal-modern:hover {
    background: #f8f9fa;
    color: #dc3545;
    transform: rotate(90deg);
}

.modal-header-modern {
    text-align: center;
    margin-bottom: 1.5rem;
    padding-bottom: 1rem;
    border-bottom: 2px solid #f8f9fa;
}

.modal-header-modern h2 {
    color: #333;
    font-size: 1.5rem;
    font-weight: 600;
    margin: 0;
}

/* 按钮组现代化 */
.btn-secondary-modern {
    background: #6c757d;
    border: none;
    border-radius: 8px;
    padding: 10px 20px;
    color: white;
    font-weight: 500;
    transition: all 0.3s ease;
    margin-right: 10px;
}

.btn-secondary-modern:hover {
    background: #5a6268;
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(108, 117, 125, 0.4);
}

/* 响应式设计 */
@media (max-width: 576px) {
    .main-container {
        padding: 0 1rem;
    }
    
    .card-header h1 {
        font-size: 1.5rem;
    }
    
    .form-control-modern {
        font-size: 0.9rem;
        padding: 12px 15px 12px 45px;
    }
}

/* 动画定义 */
@keyframes slideDown {
    from {
        opacity: 0;
        transform: translateY(-30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes slideUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

/* 加载状态 */
.loading {
    pointer-events: none;
    opacity: 0.7;
}

.loading .btn-modern::after {
    content: '';
    position: absolute;
    width: 16px;
    height: 16px;
    margin: auto;
    border: 2px solid transparent;
    border-top-color: #ffffff;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
</style>
</head>

<body>
<div class="main-container">
    
    <!-- 登录表单 -->
    <div class="login-card">
        <div class="card-header">
            <h1><i class="bi bi-shield-lock me-2"></i>用户登录</h1>
        </div>
        
        <div class="card-body p-4">
            <% if (error) { %>  
                <div class="alert-modern">  
                    <i class="bi bi-exclamation-triangle me-2"></i><%= error %>  
                </div>  
              <% } %>
            
            <form action="/login" method="POST" id="loginForm">
                <div class="input-group-modern">
                    <input type="text" id="username" name="username" 
                           placeholder="请输入身份证号" class="form-control form-control-modern" required>
                    <i class="bi bi-person input-icon"></i>
                </div>
                
                <div class="input-group-modern">
                    <input type="password" id="password" name="password" 
                           placeholder="请输入密码" class="form-control form-control-modern" required>
                    <i class="bi bi-lock input-icon"></i>
                </div>
                
                <div class="d-grid mb-3">
                    <button type="submit" class="btn btn-modern">
                        <i class="bi bi-box-arrow-in-right me-2"></i>登录
                    </button>
                </div>
            </form>
            
            <div class="text-center">
                <p class="mb-0">还没有账号？
                    <a href="/register" class="modern-link">立即注册</a>
                </p>
            </div>
        </div>
    </div>
</div>

<!-- 忘记密码模态框 -->
<div id="forgotPasswordModal" class="modal-modern">
    <div class="modal-content-modern">
        <button class="close-modal-modern">&times;</button>
        <div class="modal-header-modern">
            <h2><i class="bi bi-key me-2"></i>重置密码</h2>
        </div>
        
        <!-- 步骤 1：输入邮箱 -->
        <div id="emailVerificationStep">
            <p class="text-muted mb-3">请输入您注册时使用的邮箱地址</p>
            <form id="emailVerificationForm">
                <div class="input-group-modern">
                    <input type="email" id="resetEmail" placeholder="请输入邮箱地址" 
                           class="form-control form-control-modern" required>
                    <i class="bi bi-envelope input-icon"></i>
                </div>
                <div id="emailError" class="text-danger mb-3"></div>
                <button type="submit" id="sendVerificationCodeBtn" class="btn btn-modern w-100">
                    <i class="bi bi-send me-2"></i>发送修改密码链接
                </button>
            </form>
        </div>
        
        <!-- 步骤 2：输入验证码 -->
        <div id="verificationCodeStep" style="display: none;">
            <div class="text-center mb-4">
                <i class="bi bi-check-circle text-success" style="font-size: 3rem;"></i>
                <p class="mt-3">修改密码的链接已发送到<br><strong id="maskedEmail"></strong></p>
            </div>
            <form id="verificationCodeForm">
                <button type="button" id="resendCodeBtn" class="btn btn-secondary-modern w-100">
                    <i class="bi bi-arrow-clockwise me-2"></i>重新发送
                </button>
            </form>
        </div>
    </div>
</div>

<!-- 引入 Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const forgotPasswordModal = document.getElementById('forgotPasswordModal');
    const forgotPasswordLink = document.getElementById('forgotPasswordLink');
    const closeModalBtn = document.querySelector('.close-modal-modern');
    const loginForm = document.getElementById('loginForm');

    // 登录表单提交动画
    loginForm.addEventListener('submit', function() {
        const submitBtn = this.querySelector('button[type="submit"]');
        submitBtn.classList.add('loading');
    });

    // 打开忘记密码模态框
    if (forgotPasswordLink) {
        forgotPasswordLink.addEventListener('click', (e) => {
            e.preventDefault();
            forgotPasswordModal.style.display = 'block';
            document.body.style.overflow = 'hidden';
            resetToEmailVerificationStep();
        });
    }

    // 关闭模态框
    closeModalBtn.addEventListener('click', () => {
        closeModal();
    });

    // 点击模态框背景关闭
    forgotPasswordModal.addEventListener('click', (e) => {
        if (e.target === forgotPasswordModal) {
            closeModal();
        }
    });

    function closeModal() {
        forgotPasswordModal.style.display = 'none';
        document.body.style.overflow = 'auto';
    }

    // 发送验证码
    document.getElementById('emailVerificationForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const email = document.getElementById('resetEmail').value;
        const emailError = document.getElementById('emailError');
        const submitBtn = e.target.querySelector('button[type="submit"]');
        
        // 清除之前的错误
        emailError.textContent = '';
        submitBtn.classList.add('loading');

        try {
            const response = await fetch('/api/send-verification-code', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ email })
            });

            const data = await response.json();

            if (response.ok) {
                // 隐藏邮箱输入步骤，显示验证码输入步骤
                document.getElementById('emailVerificationStep').style.display = 'none';
                document.getElementById('verificationCodeStep').style.display = 'block';
                document.getElementById('maskedEmail').textContent = data.maskedEmail;
            } else {
                emailError.textContent = data.error || '发送验证码失败';
            }
        } catch (error) {
            console.error('发送验证码错误:', error);
            emailError.textContent = '网络错误，请稍后重试';
        } finally {
            submitBtn.classList.remove('loading');
        }
    });

    // 验证验证码 (如果有相关元素)
    const verificationCodeForm = document.getElementById('verificationCodeForm');
    if (verificationCodeForm) {
        verificationCodeForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const email = document.getElementById('resetEmail').value;
            const verificationCode = document.getElementById('verificationCode')?.value;
            const codeError = document.getElementById('codeError');

            if (!verificationCode) return;

            // 清除之前的错误
            if (codeError) codeError.textContent = '';

            try {
                const response = await fetch('/api/verify-code', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email, verificationCode })
                });

                const data = await response.json();

                if (response.ok) {
                    // 隐藏验证码输入步骤，显示重置密码步骤
                    document.getElementById('verificationCodeStep').style.display = 'none';
                    const resetPasswordStep = document.getElementById('resetPasswordStep');
                    if (resetPasswordStep) resetPasswordStep.style.display = 'block';
                } else {
                    if (codeError) codeError.textContent = data.error || '验证码错误';
                }
            } catch (error) {
                console.error('验证码验证错误:', error);
                if (codeError) codeError.textContent = '网络错误，请稍后重试';
            }
        });
    }

    // 重新发送验证码
    document.getElementById('resendCodeBtn').addEventListener('click', async () => {
        const email = document.getElementById('resetEmail').value;
        const codeError = document.getElementById('codeError');
        const resendBtn = document.getElementById('resendCodeBtn');

        // 清除之前的错误
        if (codeError) codeError.textContent = '';
        resendBtn.classList.add('loading');

        try {
            const response = await fetch('/api/resend-verification-code', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ email })
            });

            const data = await response.json();

            if (response.ok) {
                // 创建一个临时的成功提示
                const successMsg = document.createElement('div');
                successMsg.className = 'alert alert-success mt-2';
                successMsg.innerHTML = '<i class="bi bi-check-circle me-2"></i>验证码已重新发送';
                resendBtn.parentNode.insertBefore(successMsg, resendBtn);
                
                setTimeout(() => {
                    successMsg.remove();
                }, 3000);
            } else {
                if (codeError) codeError.textContent = data.error || '重新发送验证码失败';
            }
        } catch (error) {
            console.error('重新发送验证码错误:', error);
            if (codeError) codeError.textContent = '网络错误，请稍后重试';
        } finally {
            resendBtn.classList.remove('loading');
        }
    });

    // 重置到邮箱验证步骤的函数
    function resetToEmailVerificationStep() {
        document.getElementById('emailVerificationStep').style.display = 'block';
        document.getElementById('verificationCodeStep').style.display = 'none';
        const resetPasswordStep = document.getElementById('resetPasswordStep');
        if (resetPasswordStep) resetPasswordStep.style.display = 'none';
        document.getElementById('resetEmail').value = '';
        document.getElementById('emailError').textContent = '';
    }

    // 添加输入框焦点动画
    const inputs = document.querySelectorAll('.form-control-modern');
    inputs.forEach(input => {
        input.addEventListener('focus', function() {
            this.parentElement.classList.add('focused');
        });
        
        input.addEventListener('blur', function() {
            this.parentElement.classList.remove('focused');
        });
    });
});
</script>
</body>
</html>